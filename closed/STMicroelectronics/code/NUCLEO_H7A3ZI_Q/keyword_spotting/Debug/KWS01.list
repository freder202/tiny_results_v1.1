
KWS01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007294  08007294  00008294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007298  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .AI_DTCMRAM   00000000  00000000  00000000  00009010  2**0
                  CONTENTS
  8 .AI_ITCMRAM   00000000  00000000  00000000  00009010  2**0
                  CONTENTS
  9 .bss          000001b8  24000010  080072a8  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  0000a000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e51  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002900  00000000  00000000  0001ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00021790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308c6  00000000  00000000  0002360f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178fa  00000000  00000000  00053ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013f979  00000000  00000000  0006b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  001ab18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  001afa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007238 	.word	0x08007238

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08007238 	.word	0x08007238

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005e2:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <main+0xec>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d11b      	bne.n	8000626 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f4:	f3bf 8f6f 	isb	sy
}
 80005f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005fa:	4b33      	ldr	r3, [pc, #204]	@ (80006c8 <main+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
}
 800060c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <main+0xec>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <main+0xec>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000618:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800061a:	f3bf 8f4f 	dsb	sy
}
 800061e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000620:	f3bf 8f6f 	isb	sy
}
 8000624:	e000      	b.n	8000628 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000626:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000628:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <main+0xec>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d138      	bne.n	80006a6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <main+0xec>)
 8000636:	2200      	movs	r2, #0
 8000638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
}
 8000640:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <main+0xec>)
 8000644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000648:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	0b5b      	lsrs	r3, r3, #13
 800064e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000652:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	015a      	lsls	r2, r3, #5
 8000662:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000666:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066c:	4916      	ldr	r1, [pc, #88]	@ (80006c8 <main+0xec>)
 800066e:	4313      	orrs	r3, r2
 8000670:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1ef      	bne.n	800065e <main+0x82>
    } while(sets-- != 0U);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e5      	bne.n	8000654 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000688:	f3bf 8f4f 	dsb	sy
}
 800068c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <main+0xec>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <main+0xec>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000698:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a0:	f3bf 8f6f 	isb	sy
}
 80006a4:	e000      	b.n	80006a8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fcb8 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f80e 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 f98a 	bl	80009c8 <MX_GPIO_Init>
  MX_CRC_Init();
 80006b4:	f000 f880 	bl	80007b8 <MX_CRC_Init>
  MX_TIM5_Init();
 80006b8:	f000 f8a0 	bl	80007fc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80006bc:	f000 f938 	bl	8000930 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80006c0:	f000 f8ea 	bl	8000898 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <main+0xe8>
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09c      	sub	sp, #112	@ 0x70
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	224c      	movs	r2, #76	@ 0x4c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fd80 	bl	80071e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2220      	movs	r2, #32
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fd7a 	bl	80071e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006ec:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <SystemClock_Config+0xe4>)
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006f6:	2004      	movs	r0, #4
 80006f8:	f001 fe52 	bl	80023a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <SystemClock_Config+0xe8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemClock_Config+0xe8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SystemClock_Config+0xe8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000718:	bf00      	nop
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemClock_Config+0xe8>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000726:	d1f8      	bne.n	800071a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800072c:	2301      	movs	r3, #1
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000730:	2340      	movs	r3, #64	@ 0x40
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000740:	2323      	movs	r3, #35	@ 0x23
 8000742:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000750:	230c      	movs	r3, #12
 8000752:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000754:	2300      	movs	r3, #0
 8000756:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fe77 	bl	8002454 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800076c:	f000 fa42 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	233f      	movs	r3, #63	@ 0x3f
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000784:	2350      	movs	r3, #80	@ 0x50
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000788:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800078c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800078e:	2340      	movs	r3, #64	@ 0x40
 8000790:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2107      	movs	r1, #7
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fa8e 	bl	8002cb8 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007a2:	f000 fa27 	bl	8000bf4 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3770      	adds	r7, #112	@ 0x70
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58024800 	.word	0x58024800

080007b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <MX_CRC_Init+0x40>)
 80007c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_CRC_Init+0x3c>)
 80007e2:	f000 fdbd 	bl	8001360 <HAL_CRC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007ec:	f000 fa02 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2400002c 	.word	0x2400002c
 80007f8:	40023000 	.word	0x40023000

080007fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_TIM5_Init+0x94>)
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <MX_TIM5_Init+0x98>)
 800081e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 139;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_TIM5_Init+0x94>)
 8000822:	228b      	movs	r2, #139	@ 0x8b
 8000824:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_TIM5_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967294;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_TIM5_Init+0x94>)
 800082e:	f06f 0201 	mvn.w	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_TIM5_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_TIM5_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <MX_TIM5_Init+0x94>)
 8000842:	f004 fba5 	bl	8004f90 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 f9d2 	bl	8000bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_TIM5_Init+0x94>)
 800085e:	f004 fbef 	bl	8005040 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f9c4 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_TIM5_Init+0x94>)
 800087a:	f004 fe11 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f9b6 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	24000050 	.word	0x24000050
 8000894:	40000c00 	.word	0x40000c00

08000898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_USART1_UART_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008e2:	f004 fe6b 	bl	80055bc <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f982 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 80008f4:	f006 fbaa 	bl	800704c <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f979 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 8000906:	f006 fbdf 	bl	80070c8 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f970 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_USART1_UART_Init+0x90>)
 8000916:	f006 fb60 	bl	8006fda <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f968 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400009c 	.word	0x2400009c
 800092c:	40011000 	.word	0x40011000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	@ (80009c4 <MX_USART3_UART_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800097a:	f004 fe1f 	bl	80055bc <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f936 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800098c:	f006 fb5e 	bl	800704c <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f92d 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 800099e:	f006 fb93 	bl	80070c8 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f924 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f006 fb14 	bl	8006fda <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f91c 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	24000130 	.word	0x24000130
 80009c4:	40004800 	.word	0x40004800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	4b7c      	ldr	r3, [pc, #496]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	4a7a      	ldr	r2, [pc, #488]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ee:	4b78      	ldr	r3, [pc, #480]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	4b74      	ldr	r3, [pc, #464]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 80009fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a02:	4a73      	ldr	r2, [pc, #460]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a0c:	4b70      	ldr	r3, [pc, #448]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a20:	4a6b      	ldr	r2, [pc, #428]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a2a:	4b69      	ldr	r3, [pc, #420]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a38:	4b65      	ldr	r3, [pc, #404]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a3e:	4a64      	ldr	r2, [pc, #400]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a48:	4b61      	ldr	r3, [pc, #388]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b5e      	ldr	r3, [pc, #376]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a66:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b56      	ldr	r3, [pc, #344]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7a:	4a55      	ldr	r2, [pc, #340]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a84:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a98:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab0:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ab6:	4a46      	ldr	r2, [pc, #280]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ac0:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad4:	483f      	ldr	r0, [pc, #252]	@ (8000bd4 <MX_GPIO_Init+0x20c>)
 8000ad6:	f001 fc49 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483a      	ldr	r0, [pc, #232]	@ (8000bd8 <MX_GPIO_Init+0x210>)
 8000af0:	f001 fa8c 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000af4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4834      	ldr	r0, [pc, #208]	@ (8000bdc <MX_GPIO_Init+0x214>)
 8000b0a:	f001 fa7f 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b0e:	f64c 73c0 	movw	r3, #53184	@ 0xcfc0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	482f      	ldr	r0, [pc, #188]	@ (8000be0 <MX_GPIO_Init+0x218>)
 8000b24:	f001 fa72 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482a      	ldr	r0, [pc, #168]	@ (8000be4 <MX_GPIO_Init+0x21c>)
 8000b3c:	f001 fa66 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <MX_GPIO_Init+0x220>)
 8000b56:	f001 fa59 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b5a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481f      	ldr	r0, [pc, #124]	@ (8000bec <MX_GPIO_Init+0x224>)
 8000b70:	f001 fa4c 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000b74:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4819      	ldr	r0, [pc, #100]	@ (8000bf0 <MX_GPIO_Init+0x228>)
 8000b8a:	f001 fa3f 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 PG9
                           PG10 PG11 PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b8e:	f646 73c0 	movw	r3, #28608	@ 0x6fc0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	2303      	movs	r3, #3
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <MX_GPIO_Init+0x20c>)
 8000ba4:	f001 fa32 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_GPIO_Init+0x20c>)
 8000bc2:	f001 fa23 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3738      	adds	r7, #56	@ 0x38
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58021800 	.word	0x58021800
 8000bd8:	58021000 	.word	0x58021000
 8000bdc:	58020800 	.word	0x58020800
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021c00 	.word	0x58021c00
 8000be8:	58020000 	.word	0x58020000
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020c00 	.word	0x58020c00

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c08:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c0c:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x30>)
 8000c18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	58024400 	.word	0x58024400

08000c34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <HAL_CRC_MspInit+0x3c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10e      	bne.n	8000c64 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c48:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c4c:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_CRC_MspInit+0x40>)
 8000c58:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40023000 	.word	0x40023000
 8000c74:	58024400 	.word	0x58024400

08000c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10e      	bne.n	8000ca8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c90:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40000c00 	.word	0x40000c00
 8000cb8:	58024400 	.word	0x58024400

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0bc      	sub	sp, #240	@ 0xf0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	22c0      	movs	r2, #192	@ 0xc0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fa7f 	bl	80071e0 <memset>
  if(huart->Instance==USART1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a55      	ldr	r2, [pc, #340]	@ (8000e3c <HAL_UART_MspInit+0x180>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d14e      	bne.n	8000d8a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cec:	f04f 0201 	mov.w	r2, #1
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 fb64 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d0e:	f7ff ff71 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d12:	4b4b      	ldr	r3, [pc, #300]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d14:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d18:	4a49      	ldr	r2, [pc, #292]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000d22:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d24:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d36:	4a42      	ldr	r2, [pc, #264]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d40:	4b3f      	ldr	r3, [pc, #252]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000d42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23c0      	movs	r3, #192	@ 0xc0
 8000d50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d66:	2307      	movs	r3, #7
 8000d68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d70:	4619      	mov	r1, r3
 8000d72:	4834      	ldr	r0, [pc, #208]	@ (8000e44 <HAL_UART_MspInit+0x188>)
 8000d74:	f001 f94a 	bl	800200c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2025      	movs	r0, #37	@ 0x25
 8000d7e:	f000 faba 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d82:	2025      	movs	r0, #37	@ 0x25
 8000d84:	f000 fad1 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d88:	e053      	b.n	8000e32 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e48 <HAL_UART_MspInit+0x18c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d14e      	bne.n	8000e32 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d94:	f04f 0202 	mov.w	r2, #2
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fb10 	bl	80033d0 <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000db6:	f7ff ff1d 	bl	8000bf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dbc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dcc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dde:	4a18      	ldr	r2, [pc, #96]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0x184>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e10:	2307      	movs	r3, #7
 8000e12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <HAL_UART_MspInit+0x190>)
 8000e1e:	f001 f8f5 	bl	800200c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2027      	movs	r0, #39	@ 0x27
 8000e28:	f000 fa65 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e2c:	2027      	movs	r0, #39	@ 0x27
 8000e2e:	f000 fa7c 	bl	800132a <HAL_NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	37f0      	adds	r7, #240	@ 0xf0
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	58024400 	.word	0x58024400
 8000e44:	58020400 	.word	0x58020400
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	58020c00 	.word	0x58020c00

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f92b 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <USART1_IRQHandler+0x10>)
 8000eb6:	f004 fbd1 	bl	800565c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2400009c 	.word	0x2400009c

08000ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <USART3_IRQHandler+0x10>)
 8000eca:	f004 fbc7 	bl	800565c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	24000130 	.word	0x24000130

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000edc:	4b32      	ldr	r3, [pc, #200]	@ (8000fa8 <SystemInit+0xd0>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee2:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <SystemInit+0xd0>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eec:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <SystemInit+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d807      	bhi.n	8000f08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <SystemInit+0xd4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 030f 	bic.w	r3, r3, #15
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <SystemInit+0xd4>)
 8000f02:	f043 0303 	orr.w	r3, r3, #3
 8000f06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <SystemInit+0xd8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a28      	ldr	r2, [pc, #160]	@ (8000fb0 <SystemInit+0xd8>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f14:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <SystemInit+0xd8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <SystemInit+0xd8>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4924      	ldr	r1, [pc, #144]	@ (8000fb0 <SystemInit+0xd8>)
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <SystemInit+0xdc>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <SystemInit+0xd4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SystemInit+0xd4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 030f 	bic.w	r3, r3, #15
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <SystemInit+0xd4>)
 8000f3c:	f043 0303 	orr.w	r3, r3, #3
 8000f40:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <SystemInit+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <SystemInit+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <SystemInit+0xd8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <SystemInit+0xd8>)
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <SystemInit+0xe0>)
 8000f58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <SystemInit+0xd8>)
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <SystemInit+0xe4>)
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <SystemInit+0xd8>)
 8000f62:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <SystemInit+0xe8>)
 8000f64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <SystemInit+0xd8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <SystemInit+0xd8>)
 8000f6e:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <SystemInit+0xe8>)
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <SystemInit+0xd8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <SystemInit+0xd8>)
 8000f7a:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <SystemInit+0xe8>)
 8000f7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <SystemInit+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <SystemInit+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <SystemInit+0xd8>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <SystemInit+0xd8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <SystemInit+0xec>)
 8000f98:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	52002000 	.word	0x52002000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fb8:	02020200 	.word	0x02020200
 8000fbc:	01ff0000 	.word	0x01ff0000
 8000fc0:	01010280 	.word	0x01010280
 8000fc4:	52004000 	.word	0x52004000

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001000 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fcc:	f7ff ff84 	bl	8000ed8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	@ (8001008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8001014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f006 f8fb 	bl	80071f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff faef 	bl	80005dc <main>
  bx  lr
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001004:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001008:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800100c:	08007298 	.word	0x08007298
  ldr r2, =_sbss
 8001010:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001014:	240001c8 	.word	0x240001c8

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f95c 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001028:	f001 fffc 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800102c:	4602      	mov	r2, r0
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_Init+0x68>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	4913      	ldr	r1, [pc, #76]	@ (8001088 <HAL_Init+0x6c>)
 800103a:	5ccb      	ldrb	r3, [r1, r3]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_Init+0x68>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_Init+0x6c>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <HAL_Init+0x70>)
 800105e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <HAL_Init+0x74>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f814 	bl	8001094 <HAL_InitTick>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e002      	b.n	800107c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001076:	f7ff fdc3 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58024400 	.word	0x58024400
 8001088:	08007250 	.word	0x08007250
 800108c:	24000004 	.word	0x24000004
 8001090:	24000000 	.word	0x24000000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_InitTick+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e021      	b.n	80010ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <HAL_InitTick+0x64>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_InitTick+0x60>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f941 	bl	8001346 <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010dc:	f000 f90b 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_InitTick+0x68>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2400000c 	.word	0x2400000c
 80010f8:	24000000 	.word	0x24000000
 80010fc:	24000008 	.word	0x24000008

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2400000c 	.word	0x2400000c
 8001124:	240001c4 	.word	0x240001c4

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	240001c4 	.word	0x240001c4

08001140 <__NVIC_SetPriorityGrouping>:
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	05fa0000 	.word	0x05fa0000

08001188 <__NVIC_GetPriorityGrouping>:
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff40 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff33 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa4 	bl	800129c <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e054      	b.n	800141c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7f5b      	ldrb	r3, [r3, #29]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fc56 	bl	8000c34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <HAL_CRC_Init+0xc4>)
 800139c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0218 	bic.w	r2, r2, #24
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	e00c      	b.n	80013ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6899      	ldr	r1, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	461a      	mov	r2, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f834 	bl	8001428 <HAL_CRCEx_Polynomial_Set>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e028      	b.n	800141c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	795b      	ldrb	r3, [r3, #5]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	e004      	b.n	80013e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6912      	ldr	r2, [r2, #16]
 80013e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	04c11db7 	.word	0x04c11db7

08001428 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001438:	231f      	movs	r3, #31
 800143a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
 800144a:	e063      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800144c:	bf00      	nop
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	613a      	str	r2, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <HAL_CRCEx_Polynomial_Set+0x44>
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b18      	cmp	r3, #24
 8001470:	d846      	bhi.n	8001500 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001472:	a201      	add	r2, pc, #4	@ (adr r2, 8001478 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	08001507 	.word	0x08001507
 800147c:	08001501 	.word	0x08001501
 8001480:	08001501 	.word	0x08001501
 8001484:	08001501 	.word	0x08001501
 8001488:	08001501 	.word	0x08001501
 800148c:	08001501 	.word	0x08001501
 8001490:	08001501 	.word	0x08001501
 8001494:	08001501 	.word	0x08001501
 8001498:	080014f5 	.word	0x080014f5
 800149c:	08001501 	.word	0x08001501
 80014a0:	08001501 	.word	0x08001501
 80014a4:	08001501 	.word	0x08001501
 80014a8:	08001501 	.word	0x08001501
 80014ac:	08001501 	.word	0x08001501
 80014b0:	08001501 	.word	0x08001501
 80014b4:	08001501 	.word	0x08001501
 80014b8:	080014e9 	.word	0x080014e9
 80014bc:	08001501 	.word	0x08001501
 80014c0:	08001501 	.word	0x08001501
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001501 	.word	0x08001501
 80014cc:	08001501 	.word	0x08001501
 80014d0:	08001501 	.word	0x08001501
 80014d4:	08001501 	.word	0x08001501
 80014d8:	080014dd 	.word	0x080014dd
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d913      	bls.n	800150a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014e6:	e010      	b.n	800150a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	d90f      	bls.n	800150e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014f2:	e00c      	b.n	800150e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d90b      	bls.n	8001512 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014fe:	e008      	b.n	8001512 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	75fb      	strb	r3, [r7, #23]
        break;
 8001504:	e006      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001506:	bf00      	nop
 8001508:	e004      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800150a:	bf00      	nop
 800150c:	e002      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001512:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 0118 	bic.w	r1, r3, #24
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001536:	7dfb      	ldrb	r3, [r7, #23]
}
 8001538:	4618      	mov	r0, r3
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fdec 	bl	8001128 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2dc      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d008      	beq.n	800157a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2cd      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a76      	ldr	r2, [pc, #472]	@ (8001758 <HAL_DMA_Abort+0x214>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04a      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a74      	ldr	r2, [pc, #464]	@ (800175c <HAL_DMA_Abort+0x218>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d045      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	@ (8001760 <HAL_DMA_Abort+0x21c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d040      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a71      	ldr	r2, [pc, #452]	@ (8001764 <HAL_DMA_Abort+0x220>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d03b      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a70      	ldr	r2, [pc, #448]	@ (8001768 <HAL_DMA_Abort+0x224>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d036      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_DMA_Abort+0x228>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d031      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001770 <HAL_DMA_Abort+0x22c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d02c      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001774 <HAL_DMA_Abort+0x230>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d027      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <HAL_DMA_Abort+0x234>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	@ (800177c <HAL_DMA_Abort+0x238>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01d      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <HAL_DMA_Abort+0x23c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d018      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_DMA_Abort+0x240>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a64      	ldr	r2, [pc, #400]	@ (8001788 <HAL_DMA_Abort+0x244>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00e      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a62      	ldr	r2, [pc, #392]	@ (800178c <HAL_DMA_Abort+0x248>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d009      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a61      	ldr	r2, [pc, #388]	@ (8001790 <HAL_DMA_Abort+0x24c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d004      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <HAL_DMA_Abort+0x250>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_DMA_Abort+0xda>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_DMA_Abort+0xdc>
 800161e:	2300      	movs	r3, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 021e 	bic.w	r2, r2, #30
 8001632:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001642:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e00a      	b.n	8001662 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020e 	bic.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a3c      	ldr	r2, [pc, #240]	@ (8001758 <HAL_DMA_Abort+0x214>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d072      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a3a      	ldr	r2, [pc, #232]	@ (800175c <HAL_DMA_Abort+0x218>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d06d      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a39      	ldr	r2, [pc, #228]	@ (8001760 <HAL_DMA_Abort+0x21c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d068      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a37      	ldr	r2, [pc, #220]	@ (8001764 <HAL_DMA_Abort+0x220>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d063      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <HAL_DMA_Abort+0x224>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d05e      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	@ (800176c <HAL_DMA_Abort+0x228>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d059      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <HAL_DMA_Abort+0x22c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d054      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a31      	ldr	r2, [pc, #196]	@ (8001774 <HAL_DMA_Abort+0x230>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d04f      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_DMA_Abort+0x234>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04a      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2e      	ldr	r2, [pc, #184]	@ (800177c <HAL_DMA_Abort+0x238>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d045      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001780 <HAL_DMA_Abort+0x23c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d040      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001784 <HAL_DMA_Abort+0x240>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d03b      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <HAL_DMA_Abort+0x244>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d036      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_DMA_Abort+0x248>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d031      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <HAL_DMA_Abort+0x24c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d02c      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_DMA_Abort+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d027      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <HAL_DMA_Abort+0x254>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a22      	ldr	r2, [pc, #136]	@ (800179c <HAL_DMA_Abort+0x258>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01d      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <HAL_DMA_Abort+0x25c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d018      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <HAL_DMA_Abort+0x260>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_DMA_Abort+0x264>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <HAL_DMA_Abort+0x268>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d009      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <HAL_DMA_Abort+0x26c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_DMA_Abort+0x270>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d132      	bne.n	80017b8 <HAL_DMA_Abort+0x274>
 8001752:	2301      	movs	r3, #1
 8001754:	e031      	b.n	80017ba <HAL_DMA_Abort+0x276>
 8001756:	bf00      	nop
 8001758:	40020010 	.word	0x40020010
 800175c:	40020028 	.word	0x40020028
 8001760:	40020040 	.word	0x40020040
 8001764:	40020058 	.word	0x40020058
 8001768:	40020070 	.word	0x40020070
 800176c:	40020088 	.word	0x40020088
 8001770:	400200a0 	.word	0x400200a0
 8001774:	400200b8 	.word	0x400200b8
 8001778:	40020410 	.word	0x40020410
 800177c:	40020428 	.word	0x40020428
 8001780:	40020440 	.word	0x40020440
 8001784:	40020458 	.word	0x40020458
 8001788:	40020470 	.word	0x40020470
 800178c:	40020488 	.word	0x40020488
 8001790:	400204a0 	.word	0x400204a0
 8001794:	400204b8 	.word	0x400204b8
 8001798:	58025408 	.word	0x58025408
 800179c:	5802541c 	.word	0x5802541c
 80017a0:	58025430 	.word	0x58025430
 80017a4:	58025444 	.word	0x58025444
 80017a8:	58025458 	.word	0x58025458
 80017ac:	5802546c 	.word	0x5802546c
 80017b0:	58025480 	.word	0x58025480
 80017b4:	58025494 	.word	0x58025494
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001988 <HAL_DMA_Abort+0x444>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04a      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6b      	ldr	r2, [pc, #428]	@ (800198c <HAL_DMA_Abort+0x448>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d045      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001990 <HAL_DMA_Abort+0x44c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d040      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a68      	ldr	r2, [pc, #416]	@ (8001994 <HAL_DMA_Abort+0x450>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d03b      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a67      	ldr	r2, [pc, #412]	@ (8001998 <HAL_DMA_Abort+0x454>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d036      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_DMA_Abort+0x458>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d031      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a64      	ldr	r2, [pc, #400]	@ (80019a0 <HAL_DMA_Abort+0x45c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d02c      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a62      	ldr	r2, [pc, #392]	@ (80019a4 <HAL_DMA_Abort+0x460>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d027      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a61      	ldr	r2, [pc, #388]	@ (80019a8 <HAL_DMA_Abort+0x464>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d022      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5f      	ldr	r2, [pc, #380]	@ (80019ac <HAL_DMA_Abort+0x468>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01d      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5e      	ldr	r2, [pc, #376]	@ (80019b0 <HAL_DMA_Abort+0x46c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d018      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5c      	ldr	r2, [pc, #368]	@ (80019b4 <HAL_DMA_Abort+0x470>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5b      	ldr	r2, [pc, #364]	@ (80019b8 <HAL_DMA_Abort+0x474>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00e      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a59      	ldr	r2, [pc, #356]	@ (80019bc <HAL_DMA_Abort+0x478>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d009      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a58      	ldr	r2, [pc, #352]	@ (80019c0 <HAL_DMA_Abort+0x47c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <HAL_DMA_Abort+0x480>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d108      	bne.n	8001880 <HAL_DMA_Abort+0x33c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_DMA_Abort+0x34c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001890:	e013      	b.n	80018ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001892:	f7ff fc49 	bl	8001128 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b05      	cmp	r3, #5
 800189e:	d90c      	bls.n	80018ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e12d      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e5      	bne.n	8001892 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001988 <HAL_DMA_Abort+0x444>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04a      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <HAL_DMA_Abort+0x448>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d045      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2c      	ldr	r2, [pc, #176]	@ (8001990 <HAL_DMA_Abort+0x44c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d040      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001994 <HAL_DMA_Abort+0x450>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d03b      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a29      	ldr	r2, [pc, #164]	@ (8001998 <HAL_DMA_Abort+0x454>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d036      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <HAL_DMA_Abort+0x458>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d031      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a26      	ldr	r2, [pc, #152]	@ (80019a0 <HAL_DMA_Abort+0x45c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d02c      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <HAL_DMA_Abort+0x460>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d027      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <HAL_DMA_Abort+0x464>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <HAL_DMA_Abort+0x468>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01d      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <HAL_DMA_Abort+0x46c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d018      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1e      	ldr	r2, [pc, #120]	@ (80019b4 <HAL_DMA_Abort+0x470>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <HAL_DMA_Abort+0x474>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <HAL_DMA_Abort+0x478>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <HAL_DMA_Abort+0x47c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <HAL_DMA_Abort+0x480>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_DMA_Abort+0x426>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_DMA_Abort+0x428>
 800196a:	2300      	movs	r3, #0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02b      	beq.n	80019c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	223f      	movs	r2, #63	@ 0x3f
 8001980:	409a      	lsls	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	e02a      	b.n	80019de <HAL_DMA_Abort+0x49a>
 8001988:	40020010 	.word	0x40020010
 800198c:	40020028 	.word	0x40020028
 8001990:	40020040 	.word	0x40020040
 8001994:	40020058 	.word	0x40020058
 8001998:	40020070 	.word	0x40020070
 800199c:	40020088 	.word	0x40020088
 80019a0:	400200a0 	.word	0x400200a0
 80019a4:	400200b8 	.word	0x400200b8
 80019a8:	40020410 	.word	0x40020410
 80019ac:	40020428 	.word	0x40020428
 80019b0:	40020440 	.word	0x40020440
 80019b4:	40020458 	.word	0x40020458
 80019b8:	40020470 	.word	0x40020470
 80019bc:	40020488 	.word	0x40020488
 80019c0:	400204a0 	.word	0x400204a0
 80019c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_DMA_Abort+0x5dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d072      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001b24 <HAL_DMA_Abort+0x5e0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d06d      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <HAL_DMA_Abort+0x5e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d068      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	@ (8001b2c <HAL_DMA_Abort+0x5e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d063      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	@ (8001b30 <HAL_DMA_Abort+0x5ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d05e      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a47      	ldr	r2, [pc, #284]	@ (8001b34 <HAL_DMA_Abort+0x5f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d059      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a46      	ldr	r2, [pc, #280]	@ (8001b38 <HAL_DMA_Abort+0x5f4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d054      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a44      	ldr	r2, [pc, #272]	@ (8001b3c <HAL_DMA_Abort+0x5f8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04f      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <HAL_DMA_Abort+0x5fc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d04a      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a41      	ldr	r2, [pc, #260]	@ (8001b44 <HAL_DMA_Abort+0x600>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d045      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <HAL_DMA_Abort+0x604>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d040      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3e      	ldr	r2, [pc, #248]	@ (8001b4c <HAL_DMA_Abort+0x608>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d03b      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b50 <HAL_DMA_Abort+0x60c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d036      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3b      	ldr	r2, [pc, #236]	@ (8001b54 <HAL_DMA_Abort+0x610>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d031      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b58 <HAL_DMA_Abort+0x614>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d02c      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a38      	ldr	r2, [pc, #224]	@ (8001b5c <HAL_DMA_Abort+0x618>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d027      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a37      	ldr	r2, [pc, #220]	@ (8001b60 <HAL_DMA_Abort+0x61c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a35      	ldr	r2, [pc, #212]	@ (8001b64 <HAL_DMA_Abort+0x620>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01d      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <HAL_DMA_Abort+0x624>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d018      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_DMA_Abort+0x628>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <HAL_DMA_Abort+0x62c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00e      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <HAL_DMA_Abort+0x630>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2e      	ldr	r2, [pc, #184]	@ (8001b78 <HAL_DMA_Abort+0x634>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <HAL_DMA_Abort+0x638>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Abort+0x58e>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_Abort+0x590>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ae0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020010 	.word	0x40020010
 8001b24:	40020028 	.word	0x40020028
 8001b28:	40020040 	.word	0x40020040
 8001b2c:	40020058 	.word	0x40020058
 8001b30:	40020070 	.word	0x40020070
 8001b34:	40020088 	.word	0x40020088
 8001b38:	400200a0 	.word	0x400200a0
 8001b3c:	400200b8 	.word	0x400200b8
 8001b40:	40020410 	.word	0x40020410
 8001b44:	40020428 	.word	0x40020428
 8001b48:	40020440 	.word	0x40020440
 8001b4c:	40020458 	.word	0x40020458
 8001b50:	40020470 	.word	0x40020470
 8001b54:	40020488 	.word	0x40020488
 8001b58:	400204a0 	.word	0x400204a0
 8001b5c:	400204b8 	.word	0x400204b8
 8001b60:	58025408 	.word	0x58025408
 8001b64:	5802541c 	.word	0x5802541c
 8001b68:	58025430 	.word	0x58025430
 8001b6c:	58025444 	.word	0x58025444
 8001b70:	58025458 	.word	0x58025458
 8001b74:	5802546c 	.word	0x5802546c
 8001b78:	58025480 	.word	0x58025480
 8001b7c:	58025494 	.word	0x58025494

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e237      	b.n	8002002 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e22c      	b.n	8002002 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5c      	ldr	r2, [pc, #368]	@ (8001d20 <HAL_DMA_Abort_IT+0x1a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d24 <HAL_DMA_Abort_IT+0x1a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d045      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a59      	ldr	r2, [pc, #356]	@ (8001d28 <HAL_DMA_Abort_IT+0x1a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d040      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <HAL_DMA_Abort_IT+0x1ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d03b      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a56      	ldr	r2, [pc, #344]	@ (8001d30 <HAL_DMA_Abort_IT+0x1b0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d036      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a55      	ldr	r2, [pc, #340]	@ (8001d34 <HAL_DMA_Abort_IT+0x1b4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d031      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a53      	ldr	r2, [pc, #332]	@ (8001d38 <HAL_DMA_Abort_IT+0x1b8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02c      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_DMA_Abort_IT+0x1bc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d027      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_DMA_Abort_IT+0x1c0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_DMA_Abort_IT+0x1c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01d      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	@ (8001d48 <HAL_DMA_Abort_IT+0x1c8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d018      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d4c <HAL_DMA_Abort_IT+0x1cc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_DMA_Abort_IT+0x1d0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00e      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_DMA_Abort_IT+0x1d4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d009      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a47      	ldr	r2, [pc, #284]	@ (8001d58 <HAL_DMA_Abort_IT+0x1d8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_DMA_Abort_IT+0x1dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_DMA_Abort_IT+0xcc>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_Abort_IT+0xce>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8086 	beq.w	8001d60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2f      	ldr	r2, [pc, #188]	@ (8001d20 <HAL_DMA_Abort_IT+0x1a0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04a      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d24 <HAL_DMA_Abort_IT+0x1a4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d045      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	@ (8001d28 <HAL_DMA_Abort_IT+0x1a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d040      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_DMA_Abort_IT+0x1ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d03b      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a29      	ldr	r2, [pc, #164]	@ (8001d30 <HAL_DMA_Abort_IT+0x1b0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d036      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a28      	ldr	r2, [pc, #160]	@ (8001d34 <HAL_DMA_Abort_IT+0x1b4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d031      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a26      	ldr	r2, [pc, #152]	@ (8001d38 <HAL_DMA_Abort_IT+0x1b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02c      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a25      	ldr	r2, [pc, #148]	@ (8001d3c <HAL_DMA_Abort_IT+0x1bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d027      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <HAL_DMA_Abort_IT+0x1c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_DMA_Abort_IT+0x1c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01d      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	@ (8001d48 <HAL_DMA_Abort_IT+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_DMA_Abort_IT+0x1cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_DMA_Abort_IT+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <HAL_DMA_Abort_IT+0x1d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1a      	ldr	r2, [pc, #104]	@ (8001d58 <HAL_DMA_Abort_IT+0x1d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_DMA_Abort_IT+0x1dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <HAL_DMA_Abort_IT+0x18e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e178      	b.n	8002000 <HAL_DMA_Abort_IT+0x480>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e16f      	b.n	8002000 <HAL_DMA_Abort_IT+0x480>
 8001d20:	40020010 	.word	0x40020010
 8001d24:	40020028 	.word	0x40020028
 8001d28:	40020040 	.word	0x40020040
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	40020070 	.word	0x40020070
 8001d34:	40020088 	.word	0x40020088
 8001d38:	400200a0 	.word	0x400200a0
 8001d3c:	400200b8 	.word	0x400200b8
 8001d40:	40020410 	.word	0x40020410
 8001d44:	40020428 	.word	0x40020428
 8001d48:	40020440 	.word	0x40020440
 8001d4c:	40020458 	.word	0x40020458
 8001d50:	40020470 	.word	0x40020470
 8001d54:	40020488 	.word	0x40020488
 8001d58:	400204a0 	.word	0x400204a0
 8001d5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020e 	bic.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6c      	ldr	r2, [pc, #432]	@ (8001f28 <HAL_DMA_Abort_IT+0x3a8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f2c <HAL_DMA_Abort_IT+0x3ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a69      	ldr	r2, [pc, #420]	@ (8001f30 <HAL_DMA_Abort_IT+0x3b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a68      	ldr	r2, [pc, #416]	@ (8001f34 <HAL_DMA_Abort_IT+0x3b4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a66      	ldr	r2, [pc, #408]	@ (8001f38 <HAL_DMA_Abort_IT+0x3b8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a65      	ldr	r2, [pc, #404]	@ (8001f3c <HAL_DMA_Abort_IT+0x3bc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_DMA_Abort_IT+0x3c0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a62      	ldr	r2, [pc, #392]	@ (8001f44 <HAL_DMA_Abort_IT+0x3c4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	@ (8001f48 <HAL_DMA_Abort_IT+0x3c8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_DMA_Abort_IT+0x3cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f50 <HAL_DMA_Abort_IT+0x3d0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f54 <HAL_DMA_Abort_IT+0x3d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_DMA_Abort_IT+0x3d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <HAL_DMA_Abort_IT+0x3dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_DMA_Abort_IT+0x3e0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_DMA_Abort_IT+0x3e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <HAL_DMA_Abort_IT+0x2a2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e007      	b.n	8001e32 <HAL_DMA_Abort_IT+0x2b2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <HAL_DMA_Abort_IT+0x3a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d072      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a3a      	ldr	r2, [pc, #232]	@ (8001f2c <HAL_DMA_Abort_IT+0x3ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d06d      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a39      	ldr	r2, [pc, #228]	@ (8001f30 <HAL_DMA_Abort_IT+0x3b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d068      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_Abort_IT+0x3b4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d063      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a36      	ldr	r2, [pc, #216]	@ (8001f38 <HAL_DMA_Abort_IT+0x3b8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d05e      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_Abort_IT+0x3bc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d059      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <HAL_DMA_Abort_IT+0x3c0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d054      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_Abort_IT+0x3c4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04f      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <HAL_DMA_Abort_IT+0x3c8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d04a      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_DMA_Abort_IT+0x3cc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d045      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_DMA_Abort_IT+0x3d0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d040      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_DMA_Abort_IT+0x3d4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d03b      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_Abort_IT+0x3d8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d036      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <HAL_DMA_Abort_IT+0x3dc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d031      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_Abort_IT+0x3e0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d02c      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	@ (8001f64 <HAL_DMA_Abort_IT+0x3e4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d027      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_Abort_IT+0x3e8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_DMA_Abort_IT+0x3ec>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01d      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_Abort_IT+0x3f0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <HAL_DMA_Abort_IT+0x3f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_DMA_Abort_IT+0x3f8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <HAL_DMA_Abort_IT+0x3fc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_DMA_Abort_IT+0x400>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <HAL_DMA_Abort_IT+0x404>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d132      	bne.n	8001f88 <HAL_DMA_Abort_IT+0x408>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e031      	b.n	8001f8a <HAL_DMA_Abort_IT+0x40a>
 8001f26:	bf00      	nop
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	40020040 	.word	0x40020040
 8001f34:	40020058 	.word	0x40020058
 8001f38:	40020070 	.word	0x40020070
 8001f3c:	40020088 	.word	0x40020088
 8001f40:	400200a0 	.word	0x400200a0
 8001f44:	400200b8 	.word	0x400200b8
 8001f48:	40020410 	.word	0x40020410
 8001f4c:	40020428 	.word	0x40020428
 8001f50:	40020440 	.word	0x40020440
 8001f54:	40020458 	.word	0x40020458
 8001f58:	40020470 	.word	0x40020470
 8001f5c:	40020488 	.word	0x40020488
 8001f60:	400204a0 	.word	0x400204a0
 8001f64:	400204b8 	.word	0x400204b8
 8001f68:	58025408 	.word	0x58025408
 8001f6c:	5802541c 	.word	0x5802541c
 8001f70:	58025430 	.word	0x58025430
 8001f74:	58025444 	.word	0x58025444
 8001f78:	58025458 	.word	0x58025458
 8001f7c:	5802546c 	.word	0x5802546c
 8001f80:	58025480 	.word	0x58025480
 8001f84:	58025494 	.word	0x58025494
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d028      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800201a:	4b89      	ldr	r3, [pc, #548]	@ (8002240 <HAL_GPIO_Init+0x234>)
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800201e:	e194      	b.n	800234a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8186 	beq.w	8002344 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <HAL_GPIO_Init+0x44>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d130      	bne.n	80020b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002086:	2201      	movs	r2, #1
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 0201 	and.w	r2, r3, #1
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d017      	beq.n	80020ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d123      	bne.n	8002142 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80e0 	beq.w	8002344 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_GPIO_Init+0x238>)
 8002186:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800218a:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_GPIO_Init+0x238>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <HAL_GPIO_Init+0x238>)
 8002196:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_GPIO_Init+0x23c>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a20      	ldr	r2, [pc, #128]	@ (800224c <HAL_GPIO_Init+0x240>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d052      	beq.n	8002274 <HAL_GPIO_Init+0x268>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <HAL_GPIO_Init+0x244>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d031      	beq.n	800223a <HAL_GPIO_Init+0x22e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_GPIO_Init+0x248>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <HAL_GPIO_Init+0x22a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_GPIO_Init+0x24c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <HAL_GPIO_Init+0x250>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <HAL_GPIO_Init+0x254>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <HAL_GPIO_Init+0x258>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <HAL_GPIO_Init+0x25c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a18      	ldr	r2, [pc, #96]	@ (800226c <HAL_GPIO_Init+0x260>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_GPIO_Init+0x264>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x20e>
 8002216:	2309      	movs	r3, #9
 8002218:	e02d      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800221a:	230a      	movs	r3, #10
 800221c:	e02b      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800221e:	2308      	movs	r3, #8
 8002220:	e029      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002222:	2307      	movs	r3, #7
 8002224:	e027      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002226:	2306      	movs	r3, #6
 8002228:	e025      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800222a:	2305      	movs	r3, #5
 800222c:	e023      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800222e:	2304      	movs	r3, #4
 8002230:	e021      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002232:	2303      	movs	r3, #3
 8002234:	e01f      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 8002236:	2302      	movs	r3, #2
 8002238:	e01d      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800223a:	2301      	movs	r3, #1
 800223c:	e01b      	b.n	8002276 <HAL_GPIO_Init+0x26a>
 800223e:	bf00      	nop
 8002240:	58000080 	.word	0x58000080
 8002244:	58024400 	.word	0x58024400
 8002248:	58000400 	.word	0x58000400
 800224c:	58020000 	.word	0x58020000
 8002250:	58020400 	.word	0x58020400
 8002254:	58020800 	.word	0x58020800
 8002258:	58020c00 	.word	0x58020c00
 800225c:	58021000 	.word	0x58021000
 8002260:	58021400 	.word	0x58021400
 8002264:	58021800 	.word	0x58021800
 8002268:	58021c00 	.word	0x58021c00
 800226c:	58022000 	.word	0x58022000
 8002270:	58022400 	.word	0x58022400
 8002274:	2300      	movs	r3, #0
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002286:	4938      	ldr	r1, [pc, #224]	@ (8002368 <HAL_GPIO_Init+0x35c>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f ae63 	bne.w	8002020 <HAL_GPIO_Init+0x14>
  }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	3724      	adds	r7, #36	@ 0x24
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	58000400 	.word	0x58000400

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023a8:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d00a      	beq.n	80023ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023b4:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e040      	b.n	8002448 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e03e      	b.n	8002448 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80023d2:	491f      	ldr	r1, [pc, #124]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023da:	f7fe fea5 	bl	8001128 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e0:	e009      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023e2:	f7fe fea1 	bl	8001128 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f0:	d901      	bls.n	80023f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e028      	b.n	8002448 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002402:	d1ee      	bne.n	80023e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b1e      	cmp	r3, #30
 8002408:	d008      	beq.n	800241c <HAL_PWREx_ConfigSupply+0x7c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b2e      	cmp	r3, #46	@ 0x2e
 800240e:	d005      	beq.n	800241c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b1d      	cmp	r3, #29
 8002414:	d002      	beq.n	800241c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b2d      	cmp	r3, #45	@ 0x2d
 800241a:	d114      	bne.n	8002446 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800241c:	f7fe fe84 	bl	8001128 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002422:	e009      	b.n	8002438 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002424:	f7fe fe80 	bl	8001128 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002432:	d901      	bls.n	8002438 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e007      	b.n	8002448 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_PWREx_ConfigSupply+0xb0>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002444:	d1ee      	bne.n	8002424 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024800 	.word	0x58024800

08002454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f000 bc1f 	b.w	8002ca6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80b3 	beq.w	80025dc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	4b95      	ldr	r3, [pc, #596]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002480:	4b92      	ldr	r3, [pc, #584]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002488:	2b10      	cmp	r3, #16
 800248a:	d007      	beq.n	800249c <HAL_RCC_OscConfig+0x48>
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	2b18      	cmp	r3, #24
 8002490:	d112      	bne.n	80024b8 <HAL_RCC_OscConfig+0x64>
 8002492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	4b8b      	ldr	r3, [pc, #556]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8098 	beq.w	80025da <HAL_RCC_OscConfig+0x186>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8093 	bne.w	80025da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e3f6      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x7c>
 80024c2:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a81      	ldr	r2, [pc, #516]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e058      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d112      	bne.n	80024fe <HAL_RCC_OscConfig+0xaa>
 80024d8:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7b      	ldr	r2, [pc, #492]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b79      	ldr	r3, [pc, #484]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a78      	ldr	r2, [pc, #480]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b76      	ldr	r3, [pc, #472]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a75      	ldr	r2, [pc, #468]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e041      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0xda>
 8002508:	4b70      	ldr	r3, [pc, #448]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6f      	ldr	r2, [pc, #444]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800250e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6c      	ldr	r2, [pc, #432]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800251a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a69      	ldr	r2, [pc, #420]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e029      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002536:	d112      	bne.n	800255e <HAL_RCC_OscConfig+0x10a>
 8002538:	4b64      	ldr	r3, [pc, #400]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a63      	ldr	r2, [pc, #396]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800253e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b61      	ldr	r3, [pc, #388]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a60      	ldr	r2, [pc, #384]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800254a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b5e      	ldr	r3, [pc, #376]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e011      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
 800255e:	4b5b      	ldr	r3, [pc, #364]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5a      	ldr	r2, [pc, #360]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b58      	ldr	r3, [pc, #352]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a57      	ldr	r2, [pc, #348]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b55      	ldr	r3, [pc, #340]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a54      	ldr	r2, [pc, #336]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800257c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fdcd 	bl	8001128 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002592:	f7fe fdc9 	bl	8001128 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	@ 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e380      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a4:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x13e>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fdb9 	bl	8001128 <HAL_GetTick>
 80025b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ba:	f7fe fdb5 	bl	8001128 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	@ 0x64
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e36c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025cc:	4b3f      	ldr	r3, [pc, #252]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x166>
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 808c 	beq.w	8002702 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f4:	4b35      	ldr	r3, [pc, #212]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_OscConfig+0x1bc>
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b18      	cmp	r3, #24
 8002604:	d137      	bne.n	8002676 <HAL_RCC_OscConfig+0x222>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d132      	bne.n	8002676 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x1d4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e33e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002628:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 0219 	bic.w	r2, r3, #25
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4925      	ldr	r1, [pc, #148]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fd75 	bl	8001128 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002642:	f7fe fd71 	bl	8001128 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e328      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4917      	ldr	r1, [pc, #92]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002674:	e045      	b.n	8002702 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d028      	beq.n	80026d0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0219 	bic.w	r2, r3, #25
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4910      	ldr	r1, [pc, #64]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe fd4a 	bl	8001128 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe fd46 	bl	8001128 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e2fd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	4901      	ldr	r1, [pc, #4]	@ (80026cc <HAL_RCC_OscConfig+0x278>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e01a      	b.n	8002702 <HAL_RCC_OscConfig+0x2ae>
 80026cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d0:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a96      	ldr	r2, [pc, #600]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd24 	bl	8001128 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe fd20 	bl	8001128 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2d7      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f6:	4b8e      	ldr	r3, [pc, #568]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06a      	beq.n	80027e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002716:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002718:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d007      	beq.n	8002734 <HAL_RCC_OscConfig+0x2e0>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b18      	cmp	r3, #24
 8002728:	d11b      	bne.n	8002762 <HAL_RCC_OscConfig+0x30e>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d116      	bne.n	8002762 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002734:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x2f8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b80      	cmp	r3, #128	@ 0x80
 8002746:	d001      	beq.n	800274c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2ac      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274c:	4b78      	ldr	r3, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	4975      	ldr	r1, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002760:	e040      	b.n	80027e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d023      	beq.n	80027b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800276a:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a70      	ldr	r2, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fcd7 	bl	8001128 <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800277e:	f7fe fcd3 	bl	8001128 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e28a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002790:	4b67      	ldr	r3, [pc, #412]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800279c:	4b64      	ldr	r3, [pc, #400]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	4961      	ldr	r1, [pc, #388]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fcb3 	bl	8001128 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027c6:	f7fe fcaf 	bl	8001128 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e266      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d8:	4b55      	ldr	r3, [pc, #340]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d036      	beq.n	800285e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fc90 	bl	8001128 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fc8c 	bl	8001128 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e243      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x3b8>
 800282a:	e018      	b.n	800285e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b40      	ldr	r3, [pc, #256]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	4a3f      	ldr	r2, [pc, #252]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fc76 	bl	8001128 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fc72 	bl	8001128 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e229      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002852:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d019      	beq.n	80028a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002872:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2e      	ldr	r2, [pc, #184]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800287c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800287e:	f7fe fc53 	bl	8001128 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002886:	f7fe fc4f 	bl	8001128 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e206      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x432>
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a6:	4b22      	ldr	r3, [pc, #136]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80028ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fc39 	bl	8001128 <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ba:	f7fe fc35 	bl	8001128 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1ec      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028cc:	4b18      	ldr	r3, [pc, #96]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80af 	beq.w	8002a44 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e6:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <HAL_RCC_OscConfig+0x4e0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <HAL_RCC_OscConfig+0x4e0>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f2:	f7fe fc19 	bl	8001128 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe fc15 	bl	8001128 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	@ 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1cc      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290c:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_OscConfig+0x4e0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x4e4>
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	4a02      	ldr	r2, [pc, #8]	@ (8002930 <HAL_RCC_OscConfig+0x4dc>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6713      	str	r3, [r2, #112]	@ 0x70
 800292c:	e05b      	b.n	80029e6 <HAL_RCC_OscConfig+0x592>
 800292e:	bf00      	nop
 8002930:	58024400 	.word	0x58024400
 8002934:	58024800 	.word	0x58024800
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d112      	bne.n	8002966 <HAL_RCC_OscConfig+0x512>
 8002940:	4b9d      	ldr	r3, [pc, #628]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a9c      	ldr	r2, [pc, #624]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a99      	ldr	r2, [pc, #612]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	4b97      	ldr	r3, [pc, #604]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a96      	ldr	r2, [pc, #600]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
 8002964:	e03f      	b.n	80029e6 <HAL_RCC_OscConfig+0x592>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d112      	bne.n	8002994 <HAL_RCC_OscConfig+0x540>
 800296e:	4b92      	ldr	r3, [pc, #584]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	4a91      	ldr	r2, [pc, #580]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	@ 0x70
 800297a:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	4a8b      	ldr	r2, [pc, #556]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	@ 0x70
 8002992:	e028      	b.n	80029e6 <HAL_RCC_OscConfig+0x592>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b85      	cmp	r3, #133	@ 0x85
 800299a:	d112      	bne.n	80029c2 <HAL_RCC_OscConfig+0x56e>
 800299c:	4b86      	ldr	r3, [pc, #536]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a85      	ldr	r2, [pc, #532]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a8:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	4a82      	ldr	r2, [pc, #520]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b4:	4b80      	ldr	r3, [pc, #512]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c0:	e011      	b.n	80029e6 <HAL_RCC_OscConfig+0x592>
 80029c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	4a79      	ldr	r2, [pc, #484]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029da:	4b77      	ldr	r3, [pc, #476]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	4a76      	ldr	r2, [pc, #472]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 80029e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d015      	beq.n	8002a1a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fb9b 	bl	8001128 <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fb97 	bl	8001128 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e14c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ee      	beq.n	80029f6 <HAL_RCC_OscConfig+0x5a2>
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fb85 	bl	8001128 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fb81 	bl	8001128 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e136      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a38:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 812b 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	f000 80bb 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f040 8095 	bne.w	8002b90 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b54      	ldr	r3, [pc, #336]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a53      	ldr	r2, [pc, #332]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fb59 	bl	8001128 <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fb55 	bl	8001128 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e10c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9c:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_OscConfig+0x768>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	4942      	ldr	r1, [pc, #264]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
 8002ad0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	3b01      	subs	r3, #1
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ae2:	4935      	ldr	r1, [pc, #212]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ae8:	4b33      	ldr	r3, [pc, #204]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aec:	4a32      	ldr	r2, [pc, #200]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af4:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af8:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <HAL_RCC_OscConfig+0x76c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b00:	00d2      	lsls	r2, r2, #3
 8002b02:	492d      	ldr	r1, [pc, #180]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	f023 020c 	bic.w	r2, r3, #12
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	4928      	ldr	r1, [pc, #160]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	f023 0202 	bic.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4924      	ldr	r1, [pc, #144]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b2c:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	4a21      	ldr	r2, [pc, #132]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b38:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b44:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b5c:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a15      	ldr	r2, [pc, #84]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fade 	bl	8001128 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fada 	bl	8001128 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e091      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x71c>
 8002b8e:	e089      	b.n	8002ca4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <HAL_RCC_OscConfig+0x764>)
 8002b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fac4 	bl	8001128 <HAL_GetTick>
 8002ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ba2:	e00f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fac0 	bl	8001128 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d908      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e077      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
 8002bb6:	bf00      	nop
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	fffffc0c 	.word	0xfffffc0c
 8002bc0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e9      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x750>
 8002bd0:	e068      	b.n	8002ca4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bd2:	4b37      	ldr	r3, [pc, #220]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bd8:	4b35      	ldr	r3, [pc, #212]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d031      	beq.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d12a      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d122      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d11a      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0a5b      	lsrs	r3, r3, #9
 8002c18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d111      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d108      	bne.n	8002c4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0e1b      	lsrs	r3, r3, #24
 8002c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c58:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d01f      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c70:	f7fe fa5a 	bl	8001128 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c76:	bf00      	nop
 8002c78:	f7fe fa56 	bl	8001128 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d0f9      	beq.n	8002c78 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <HAL_RCC_OscConfig+0x860>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c90:	00d2      	lsls	r2, r2, #3
 8002c92:	4907      	ldr	r1, [pc, #28]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_RCC_OscConfig+0x85c>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3730      	adds	r7, #48	@ 0x30
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	ffff0007 	.word	0xffff0007

08002cb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e19c      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b87      	ldr	r3, [pc, #540]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4985      	ldr	r1, [pc, #532]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b83      	ldr	r3, [pc, #524]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e184      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d18:	4b78      	ldr	r3, [pc, #480]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	4975      	ldr	r1, [pc, #468]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d908      	bls.n	8002d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d46:	4b6d      	ldr	r3, [pc, #436]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	496a      	ldr	r1, [pc, #424]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	4b64      	ldr	r3, [pc, #400]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d74:	4b61      	ldr	r3, [pc, #388]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	495e      	ldr	r1, [pc, #376]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d908      	bls.n	8002db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002da2:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4953      	ldr	r1, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d908      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f023 020f 	bic.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4947      	ldr	r1, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d055      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dee:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4940      	ldr	r1, [pc, #256]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e08:	4b3c      	ldr	r3, [pc, #240]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0f6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0ea      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e38:	4b30      	ldr	r3, [pc, #192]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0de      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d6      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4925      	ldr	r1, [pc, #148]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f95d 	bl	8001128 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e72:	f7fe f959 	bl	8001128 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0be      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1eb      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d208      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	490e      	ldr	r1, [pc, #56]	@ (8002efc <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d214      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e086      	b.n	8003006 <HAL_RCC_ClockConfig+0x34e>
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	4b3f      	ldr	r3, [pc, #252]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d208      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4939      	ldr	r1, [pc, #228]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b34      	ldr	r3, [pc, #208]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f4a:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	492e      	ldr	r1, [pc, #184]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d208      	bcs.n	8002f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f78:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4922      	ldr	r1, [pc, #136]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d208      	bcs.n	8002fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4917      	ldr	r1, [pc, #92]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fb8:	f000 f834 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	4912      	ldr	r1, [pc, #72]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4a0d      	ldr	r2, [pc, #52]	@ (8003014 <HAL_RCC_ClockConfig+0x35c>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x360>)
 8002fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x364>)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_ClockConfig+0x368>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe f84a 	bl	8001094 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	08007250 	.word	0x08007250
 8003018:	24000004 	.word	0x24000004
 800301c:	24000000 	.word	0x24000000
 8003020:	24000008 	.word	0x24000008

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302a:	4bb3      	ldr	r3, [pc, #716]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003032:	2b18      	cmp	r3, #24
 8003034:	f200 8155 	bhi.w	80032e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003038:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080032e3 	.word	0x080032e3
 8003048:	080032e3 	.word	0x080032e3
 800304c:	080032e3 	.word	0x080032e3
 8003050:	080032e3 	.word	0x080032e3
 8003054:	080032e3 	.word	0x080032e3
 8003058:	080032e3 	.word	0x080032e3
 800305c:	080032e3 	.word	0x080032e3
 8003060:	080030cb 	.word	0x080030cb
 8003064:	080032e3 	.word	0x080032e3
 8003068:	080032e3 	.word	0x080032e3
 800306c:	080032e3 	.word	0x080032e3
 8003070:	080032e3 	.word	0x080032e3
 8003074:	080032e3 	.word	0x080032e3
 8003078:	080032e3 	.word	0x080032e3
 800307c:	080032e3 	.word	0x080032e3
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080032e3 	.word	0x080032e3
 8003088:	080032e3 	.word	0x080032e3
 800308c:	080032e3 	.word	0x080032e3
 8003090:	080032e3 	.word	0x080032e3
 8003094:	080032e3 	.word	0x080032e3
 8003098:	080032e3 	.word	0x080032e3
 800309c:	080032e3 	.word	0x080032e3
 80030a0:	080030d7 	.word	0x080030d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a4:	4b94      	ldr	r3, [pc, #592]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030b0:	4b91      	ldr	r3, [pc, #580]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030c2:	e111      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c4:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c6:	61bb      	str	r3, [r7, #24]
      break;
 80030c8:	e10e      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030cc:	61bb      	str	r3, [r7, #24]
      break;
 80030ce:	e10b      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030d2:	61bb      	str	r3, [r7, #24]
      break;
 80030d4:	e108      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d6:	4b88      	ldr	r3, [pc, #544]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030e0:	4b85      	ldr	r3, [pc, #532]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030ec:	4b82      	ldr	r3, [pc, #520]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030f6:	4b80      	ldr	r3, [pc, #512]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80e1 	beq.w	80032dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	f000 8083 	beq.w	8003228 <HAL_RCC_GetSysClockFreq+0x204>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f200 80a1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x248>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x114>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d056      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003136:	e099      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02d      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003144:	4b6c      	ldr	r3, [pc, #432]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316e:	4b62      	ldr	r3, [pc, #392]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003182:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800319e:	e087      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e2:	e065      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003226:	e043      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003232:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003314 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800326a:	e021      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	0a5b      	lsrs	r3, r3, #9
 80032b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ba:	3301      	adds	r3, #1
 80032bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d4:	ee17 3a90 	vmov	r3, s15
 80032d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032da:	e005      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]
      break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e4:	61bb      	str	r3, [r7, #24]
      break;
 80032e6:	bf00      	nop
  }

  return sysclockfreq;
 80032e8:	69bb      	ldr	r3, [r7, #24]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	@ 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	58024400 	.word	0x58024400
 80032fc:	03d09000 	.word	0x03d09000
 8003300:	003d0900 	.word	0x003d0900
 8003304:	007a1200 	.word	0x007a1200
 8003308:	46000000 	.word	0x46000000
 800330c:	4c742400 	.word	0x4c742400
 8003310:	4a742400 	.word	0x4a742400
 8003314:	4af42400 	.word	0x4af42400

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800331e:	f7ff fe81 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x50>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490f      	ldr	r1, [pc, #60]	@ (800336c <HAL_RCC_GetHCLKFreq+0x54>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x50>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	4a09      	ldr	r2, [pc, #36]	@ (800336c <HAL_RCC_GetHCLKFreq+0x54>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	fa22 f303 	lsr.w	r3, r2, r3
 8003352:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x58>)
 8003354:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003356:	4a07      	ldr	r2, [pc, #28]	@ (8003374 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800335c:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x58>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58024400 	.word	0x58024400
 800336c:	08007250 	.word	0x08007250
 8003370:	24000004 	.word	0x24000004
 8003374:	24000000 	.word	0x24000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800337c:	f7ff ffcc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4904      	ldr	r1, [pc, #16]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	08007250 	.word	0x08007250

080033a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80033a8:	f7ff ffb6 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4904      	ldr	r1, [pc, #16]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58024400 	.word	0x58024400
 80033cc:	08007250 	.word	0x08007250

080033d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b0c8      	sub	sp, #288	@ 0x120
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033f4:	2500      	movs	r5, #0
 80033f6:	ea54 0305 	orrs.w	r3, r4, r5
 80033fa:	d049      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003406:	d02f      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800340c:	d828      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800340e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003412:	d01a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003418:	d822      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800341e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003422:	d007      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003424:	e01c      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003426:	4ba7      	ldr	r3, [pc, #668]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	4aa6      	ldr	r2, [pc, #664]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003432:	e01a      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003438:	3308      	adds	r3, #8
 800343a:	2102      	movs	r1, #2
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fc43 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003448:	e00f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800344a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800344e:	3328      	adds	r3, #40	@ 0x28
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fcea 	bl	8004e2c <RCCEx_PLL3_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800345e:	e004      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003466:	e000      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003472:	4b94      	ldr	r3, [pc, #592]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800347e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003480:	4a90      	ldr	r2, [pc, #576]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	430b      	orrs	r3, r1
 8003484:	6513      	str	r3, [r2, #80]	@ 0x50
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800348c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800349c:	f04f 0900 	mov.w	r9, #0
 80034a0:	ea58 0309 	orrs.w	r3, r8, r9
 80034a4:	d047      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d82a      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034b0:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034f1 	.word	0x080034f1
 80034c4:	0800350f 	.word	0x0800350f
 80034c8:	0800350f 	.word	0x0800350f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b7d      	ldr	r3, [pc, #500]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	4a7c      	ldr	r2, [pc, #496]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d8:	e01a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034de:	3308      	adds	r3, #8
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fbf0 	bl	8004cc8 <RCCEx_PLL2_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ee:	e00f      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f4:	3328      	adds	r3, #40	@ 0x28
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fc97 	bl	8004e2c <RCCEx_PLL3_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351c:	f023 0107 	bic.w	r1, r3, #7
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	4a67      	ldr	r2, [pc, #412]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6513      	str	r3, [r2, #80]	@ 0x50
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003532:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003542:	f04f 0b00 	mov.w	fp, #0
 8003546:	ea5a 030b 	orrs.w	r3, sl, fp
 800354a:	d054      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003556:	d036      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003558:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800355c:	d82f      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800355e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003562:	d032      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003568:	d829      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800356a:	2bc0      	cmp	r3, #192	@ 0xc0
 800356c:	d02f      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800356e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003570:	d825      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d018      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003576:	2b80      	cmp	r3, #128	@ 0x80
 8003578:	d821      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d007      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003582:	e01c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b4f      	ldr	r3, [pc, #316]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	4a4e      	ldr	r2, [pc, #312]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003590:	e01e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003596:	3308      	adds	r3, #8
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fb94 	bl	8004cc8 <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035a6:	e013      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ac:	3328      	adds	r3, #40	@ 0x28
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fc3b 	bl	8004e2c <RCCEx_PLL3_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035d8:	4b3a      	ldr	r3, [pc, #232]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e6:	4a37      	ldr	r2, [pc, #220]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003602:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800360c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003610:	460b      	mov	r3, r1
 8003612:	4313      	orrs	r3, r2
 8003614:	d05c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800361a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003620:	d03b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003622:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003626:	d834      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362c:	d037      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800362e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003632:	d82e      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003634:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003638:	d033      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800363a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800363e:	d828      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003644:	d01a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364a:	d822      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003654:	d007      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003656:	e01c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b1a      	ldr	r3, [pc, #104]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003664:	e01e      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366a:	3308      	adds	r3, #8
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f001 fb2a 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800367a:	e013      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003680:	3328      	adds	r3, #40	@ 0x28
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f001 fbd1 	bl	8004e2c <RCCEx_PLL3_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003690:	e008      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003698:	e004      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10d      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80036b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ba:	4a02      	ldr	r2, [pc, #8]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	6513      	str	r3, [r2, #80]	@ 0x50
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d03a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f6:	2b30      	cmp	r3, #48	@ 0x30
 80036f8:	d01f      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036fa:	2b30      	cmp	r3, #48	@ 0x30
 80036fc:	d819      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d00c      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003702:	2b20      	cmp	r3, #32
 8003704:	d815      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d019      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800370a:	2b10      	cmp	r3, #16
 800370c:	d111      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370e:	4bae      	ldr	r3, [pc, #696]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003712:	4aad      	ldr	r2, [pc, #692]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800371a:	e011      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800371c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003720:	3308      	adds	r3, #8
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f001 facf 	bl	8004cc8 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800373e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003740:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003748:	4b9f      	ldr	r3, [pc, #636]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800374a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003756:	4a9c      	ldr	r2, [pc, #624]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003758:	430b      	orrs	r3, r1
 800375a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003762:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003772:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800377c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d051      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800378a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003790:	d035      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003796:	d82e      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800379c:	d031      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800379e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037a2:	d828      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a8:	d01a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ae:	d822      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b8:	d007      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80037ba:	e01c      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037bc:	4b82      	ldr	r3, [pc, #520]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	4a81      	ldr	r2, [pc, #516]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c8:	e01c      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ce:	3308      	adds	r3, #8
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 fa78 	bl	8004cc8 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e4:	3328      	adds	r3, #40	@ 0x28
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fb1f 	bl	8004e2c <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800380c:	4b6e      	ldr	r3, [pc, #440]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800381a:	4a6b      	ldr	r2, [pc, #428]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003826:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800382a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003840:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d053      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003854:	d033      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003856:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800385a:	d82c      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800385c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003860:	d02f      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003866:	d826      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003868:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800386c:	d02b      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800386e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003872:	d820      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003878:	d012      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800387a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800387e:	d81a      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d022      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003888:	d115      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800388e:	3308      	adds	r3, #8
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fa18 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800389e:	e015      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a4:	3328      	adds	r3, #40	@ 0x28
 80038a6:	2101      	movs	r1, #1
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fabf 	bl	8004e2c <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038b4:	e00a      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038be:	bf00      	nop
 80038c0:	e004      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038d4:	4b3c      	ldr	r3, [pc, #240]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e2:	4a39      	ldr	r2, [pc, #228]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e8:	e003      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003908:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d060      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800391a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800391e:	d039      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003920:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003924:	d832      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392a:	d035      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800392c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003930:	d82c      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003936:	d031      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d826      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800393e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003942:	d02d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003948:	d820      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800394a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800394e:	d012      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003954:	d81a      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d024      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800395a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800395e:	d115      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003964:	3308      	adds	r3, #8
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f001 f9ad 	bl	8004cc8 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003974:	e017      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800397a:	3328      	adds	r3, #40	@ 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fa54 	bl	8004e2c <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003992:	e008      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003994:	bf00      	nop
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003998:	bf00      	nop
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10e      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039be:	4a02      	ldr	r2, [pc, #8]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ee:	460b      	mov	r3, r1
 80039f0:	4313      	orrs	r3, r2
 80039f2:	d037      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fe:	d00e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d816      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a10:	4bc4      	ldr	r3, [pc, #784]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	4ac3      	ldr	r2, [pc, #780]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a1c:	e00f      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a22:	3308      	adds	r3, #8
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f94e 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a46:	4bb7      	ldr	r3, [pc, #732]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a54:	4ab3      	ldr	r2, [pc, #716]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d039      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d81c      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003aa5 	.word	0x08003aa5
 8003a9c:	08003ab3 	.word	0x08003ab3
 8003aa0:	08003ad1 	.word	0x08003ad1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4a9e      	ldr	r2, [pc, #632]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ab0:	e00f      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 f904 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ac6:	e004      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ada:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	f023 0103 	bic.w	r1, r3, #3
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae8:	4a8e      	ldr	r2, [pc, #568]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f000 8099 	beq.w	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b1a:	4b83      	ldr	r3, [pc, #524]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a82      	ldr	r2, [pc, #520]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b26:	f7fd faff 	bl	8001128 <HAL_GetTick>
 8003b2a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fd fafa 	bl	8001128 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	@ 0x64
 8003b3e:	d903      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b48:	4b77      	ldr	r3, [pc, #476]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ed      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d173      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b5c:	4b71      	ldr	r3, [pc, #452]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b68:	4053      	eors	r3, r2
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b72:	4b6c      	ldr	r3, [pc, #432]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b7e:	4b69      	ldr	r3, [pc, #420]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8a:	4b66      	ldr	r3, [pc, #408]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b96:	4a63      	ldr	r2, [pc, #396]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003baa:	d118      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fabc 	bl	8001128 <HAL_GetTick>
 8003bb0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb4:	e00d      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fab7 	bl	8001128 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d903      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd2:	4b54      	ldr	r3, [pc, #336]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0eb      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d129      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf6:	d10e      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c08:	091a      	lsrs	r2, r3, #4
 8003c0a:	4b48      	ldr	r3, [pc, #288]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	4a45      	ldr	r2, [pc, #276]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6113      	str	r3, [r2, #16]
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c16:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4a42      	ldr	r2, [pc, #264]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c20:	6113      	str	r3, [r2, #16]
 8003c22:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	4a3c      	ldr	r2, [pc, #240]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c42:	e003      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f002 0301 	and.w	r3, r2, #1
 8003c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f000 8090 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c76:	2b28      	cmp	r3, #40	@ 0x28
 8003c78:	d870      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003d65 	.word	0x08003d65
 8003c84:	08003d5d 	.word	0x08003d5d
 8003c88:	08003d5d 	.word	0x08003d5d
 8003c8c:	08003d5d 	.word	0x08003d5d
 8003c90:	08003d5d 	.word	0x08003d5d
 8003c94:	08003d5d 	.word	0x08003d5d
 8003c98:	08003d5d 	.word	0x08003d5d
 8003c9c:	08003d5d 	.word	0x08003d5d
 8003ca0:	08003d31 	.word	0x08003d31
 8003ca4:	08003d5d 	.word	0x08003d5d
 8003ca8:	08003d5d 	.word	0x08003d5d
 8003cac:	08003d5d 	.word	0x08003d5d
 8003cb0:	08003d5d 	.word	0x08003d5d
 8003cb4:	08003d5d 	.word	0x08003d5d
 8003cb8:	08003d5d 	.word	0x08003d5d
 8003cbc:	08003d5d 	.word	0x08003d5d
 8003cc0:	08003d47 	.word	0x08003d47
 8003cc4:	08003d5d 	.word	0x08003d5d
 8003cc8:	08003d5d 	.word	0x08003d5d
 8003ccc:	08003d5d 	.word	0x08003d5d
 8003cd0:	08003d5d 	.word	0x08003d5d
 8003cd4:	08003d5d 	.word	0x08003d5d
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003d5d 	.word	0x08003d5d
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d5d 	.word	0x08003d5d
 8003ce8:	08003d5d 	.word	0x08003d5d
 8003cec:	08003d5d 	.word	0x08003d5d
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	08003d65 	.word	0x08003d65
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d65 	.word	0x08003d65
 8003d24:	58024400 	.word	0x58024400
 8003d28:	58024800 	.word	0x58024800
 8003d2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d34:	3308      	adds	r3, #8
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffc5 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d44:	e00f      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d4a:	3328      	adds	r3, #40	@ 0x28
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f86c 	bl	8004e2c <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d6e:	4bc0      	ldr	r3, [pc, #768]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7e:	4abc      	ldr	r2, [pc, #752]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f002 0302 	and.w	r3, r2, #2
 8003d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003da4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d043      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d824      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003dba:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003e0d 	.word	0x08003e0d
 8003dc4:	08003dd9 	.word	0x08003dd9
 8003dc8:	08003def 	.word	0x08003def
 8003dcc:	08003e0d 	.word	0x08003e0d
 8003dd0:	08003e0d 	.word	0x08003e0d
 8003dd4:	08003e0d 	.word	0x08003e0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ddc:	3308      	adds	r3, #8
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 ff71 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dec:	e00f      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df2:	3328      	adds	r3, #40	@ 0x28
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f818 	bl	8004e2c <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e02:	e004      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e0a:	e000      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e16:	4b96      	ldr	r3, [pc, #600]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	f023 0107 	bic.w	r1, r3, #7
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e26:	4a92      	ldr	r2, [pc, #584]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f002 0304 	and.w	r3, r2, #4
 8003e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e4c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d043      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d824      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e62:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003eb5 	.word	0x08003eb5
 8003e6c:	08003e81 	.word	0x08003e81
 8003e70:	08003e97 	.word	0x08003e97
 8003e74:	08003eb5 	.word	0x08003eb5
 8003e78:	08003eb5 	.word	0x08003eb5
 8003e7c:	08003eb5 	.word	0x08003eb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e84:	3308      	adds	r3, #8
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ff1d 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e94:	e00f      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e9a:	3328      	adds	r3, #40	@ 0x28
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 ffc4 	bl	8004e2c <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f023 0107 	bic.w	r1, r3, #7
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ece:	4a68      	ldr	r2, [pc, #416]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f002 0320 	and.w	r3, r2, #32
 8003eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	d055      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0a:	d033      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f10:	d82c      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f16:	d02f      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d826      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f22:	d02b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f28:	d820      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2e:	d012      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f34:	d81a      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d022      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3e:	d115      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f44:	3308      	adds	r3, #8
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 febd 	bl	8004cc8 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f54:	e015      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	3328      	adds	r3, #40	@ 0x28
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 ff64 	bl	8004e2c <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f72:	e006      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f74:	bf00      	nop
 8003f76:	e004      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8a:	4b39      	ldr	r3, [pc, #228]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f9a:	4a35      	ldr	r2, [pc, #212]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d058      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fd2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd6:	d033      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fd8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fdc:	d82c      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	d02f      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe8:	d826      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fee:	d02b      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff4:	d820      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffa:	d012      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004000:	d81a      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d022      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800400a:	d115      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800400c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004010:	3308      	adds	r3, #8
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fe57 	bl	8004cc8 <RCCEx_PLL2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004020:	e015      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004026:	3328      	adds	r3, #40	@ 0x28
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fefe 	bl	8004e2c <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004036:	e00a      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800403e:	e006      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004040:	bf00      	nop
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004044:	bf00      	nop
 8004046:	e002      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004048:	bf00      	nop
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004056:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004066:	4a02      	ldr	r2, [pc, #8]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6593      	str	r3, [r2, #88]	@ 0x58
 800406c:	e006      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004078:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004092:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d055      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040a8:	d033      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040ae:	d82c      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b4:	d02f      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ba:	d826      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040c0:	d02b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040c6:	d820      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040cc:	d012      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80040ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040d2:	d81a      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d022      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040dc:	d115      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e2:	3308      	adds	r3, #8
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fdee 	bl	8004cc8 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040f2:	e015      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f8:	3328      	adds	r3, #40	@ 0x28
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fe95 	bl	8004e2c <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004112:	bf00      	nop
 8004114:	e004      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004128:	4ba1      	ldr	r3, [pc, #644]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004138:	4a9d      	ldr	r2, [pc, #628]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6593      	str	r3, [r2, #88]	@ 0x58
 800413e:	e003      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004144:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 0308 	and.w	r3, r2, #8
 8004154:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800415e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d01e      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	d10c      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417a:	3328      	adds	r3, #40	@ 0x28
 800417c:	2102      	movs	r1, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fe54 	bl	8004e2c <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004190:	4b87      	ldr	r3, [pc, #540]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041a0:	4a83      	ldr	r2, [pc, #524]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f002 0310 	and.w	r3, r2, #16
 80041b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d01e      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d2:	d10c      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d8:	3328      	adds	r3, #40	@ 0x28
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fe25 	bl	8004e2c <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ee:	4b70      	ldr	r3, [pc, #448]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041fe:	4a6c      	ldr	r2, [pc, #432]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800421a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d03e      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800422c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004230:	d022      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004236:	d81b      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004240:	d00b      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004242:	e015      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004248:	3308      	adds	r3, #8
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd3b 	bl	8004cc8 <RCCEx_PLL2_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004258:	e00f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800425a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425e:	3328      	adds	r3, #40	@ 0x28
 8004260:	2102      	movs	r1, #2
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fde2 	bl	8004e2c <RCCEx_PLL3_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004282:	4b4b      	ldr	r3, [pc, #300]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800428a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004292:	4a47      	ldr	r2, [pc, #284]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004294:	430b      	orrs	r3, r1
 8004296:	6593      	str	r3, [r2, #88]	@ 0x58
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800429e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042b0:	2300      	movs	r3, #0
 80042b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ca:	d01f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80042cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042d0:	d818      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80042d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042dc:	d007      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80042de:	e011      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b33      	ldr	r3, [pc, #204]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ec:	e00f      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f2:	3328      	adds	r3, #40	@ 0x28
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd98 	bl	8004e2c <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004316:	4b26      	ldr	r3, [pc, #152]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004326:	4a22      	ldr	r2, [pc, #136]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6553      	str	r3, [r2, #84]	@ 0x54
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004332:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004342:	673b      	str	r3, [r7, #112]	@ 0x70
 8004344:	2300      	movs	r3, #0
 8004346:	677b      	str	r3, [r7, #116]	@ 0x74
 8004348:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d034      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d007      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004362:	e011      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4a11      	ldr	r2, [pc, #68]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004370:	e00e      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004376:	3308      	adds	r3, #8
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fca4 	bl	8004cc8 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800438e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004390:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800439a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a6:	4a02      	ldr	r2, [pc, #8]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80043ae:	bf00      	nop
 80043b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ca:	2300      	movs	r3, #0
 80043cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d00c      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043dc:	3328      	adds	r3, #40	@ 0x28
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fd23 	bl	8004e2c <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004400:	2300      	movs	r3, #0
 8004402:	667b      	str	r3, [r7, #100]	@ 0x64
 8004404:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d038      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800441a:	d018      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800441c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004420:	d811      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004426:	d014      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800442c:	d80b      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d011      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004436:	d106      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004438:	4bc3      	ldr	r3, [pc, #780]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	4ac2      	ldr	r2, [pc, #776]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004444:	e008      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800444c:	e004      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004458:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004460:	4bb9      	ldr	r3, [pc, #740]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004470:	4ab5      	ldr	r2, [pc, #724]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	@ 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800447c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800448c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448e:	2300      	movs	r3, #0
 8004490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004492:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800449c:	4baa      	ldr	r3, [pc, #680]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800449e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044aa:	4aa7      	ldr	r2, [pc, #668]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80044be:	2300      	movs	r3, #0
 80044c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044cc:	4b9e      	ldr	r3, [pc, #632]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a9b      	ldr	r2, [pc, #620]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80044e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80044ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ee:	2300      	movs	r3, #0
 80044f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044fc:	4b92      	ldr	r3, [pc, #584]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450a:	4a8f      	ldr	r2, [pc, #572]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800450c:	430b      	orrs	r3, r1
 800450e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800451c:	643b      	str	r3, [r7, #64]	@ 0x40
 800451e:	2300      	movs	r3, #0
 8004520:	647b      	str	r3, [r7, #68]	@ 0x44
 8004522:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800452c:	4b86      	ldr	r3, [pc, #536]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4a85      	ldr	r2, [pc, #532]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004532:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004536:	6113      	str	r3, [r2, #16]
 8004538:	4b83      	ldr	r3, [pc, #524]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800453a:	6919      	ldr	r1, [r3, #16]
 800453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004544:	4a80      	ldr	r2, [pc, #512]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004546:	430b      	orrs	r3, r1
 8004548:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800454a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004558:	2300      	movs	r3, #0
 800455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800455c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004566:	4b78      	ldr	r3, [pc, #480]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004574:	4a74      	ldr	r2, [pc, #464]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004576:	430b      	orrs	r3, r1
 8004578:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800457a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
 8004588:	2300      	movs	r3, #0
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
 800458c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004596:	4b6c      	ldr	r3, [pc, #432]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800459e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a6:	4a68      	ldr	r2, [pc, #416]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	2100      	movs	r1, #0
 80045b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d011      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045cc:	3308      	adds	r3, #8
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fb79 	bl	8004cc8 <RCCEx_PLL2_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	2100      	movs	r1, #0
 80045f6:	6239      	str	r1, [r7, #32]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d011      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800460c:	3308      	adds	r3, #8
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fb59 	bl	8004cc8 <RCCEx_PLL2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800461c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004628:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800462c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	2100      	movs	r1, #0
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004642:	460b      	mov	r3, r1
 8004644:	4313      	orrs	r3, r2
 8004646:	d011      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464c:	3308      	adds	r3, #8
 800464e:	2102      	movs	r1, #2
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb39 	bl	8004cc8 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800465c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004668:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800466c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	2100      	movs	r1, #0
 8004676:	6139      	str	r1, [r7, #16]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d011      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800468c:	3328      	adds	r3, #40	@ 0x28
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fbcb 	bl	8004e2c <RCCEx_PLL3_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800469c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	2100      	movs	r1, #0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d011      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046cc:	3328      	adds	r3, #40	@ 0x28
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fbab 	bl	8004e2c <RCCEx_PLL3_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80046dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	2100      	movs	r1, #0
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004702:	460b      	mov	r3, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	d011      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fb8b 	bl	8004e2c <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800471c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004728:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800472c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
}
 800473a:	4618      	mov	r0, r3
 800473c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400

0800474c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004750:	f7fe fde2 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4904      	ldr	r1, [pc, #16]	@ (8004774 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	58024400 	.word	0x58024400
 8004774:	08007250 	.word	0x08007250

08004778 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	@ 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004780:	4ba1      	ldr	r3, [pc, #644]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800478a:	4b9f      	ldr	r3, [pc, #636]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478e:	0b1b      	lsrs	r3, r3, #12
 8004790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004794:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004796:	4b9c      	ldr	r3, [pc, #624]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047a2:	4b99      	ldr	r3, [pc, #612]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8111 	beq.w	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	f000 8083 	beq.w	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f200 80a1 	bhi.w	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d056      	beq.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047e2:	e099      	b.n	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e4:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02d      	beq.n	800484c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f0:	4b85      	ldr	r3, [pc, #532]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	08db      	lsrs	r3, r3, #3
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	4a84      	ldr	r2, [pc, #528]	@ (8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800484a:	e087      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488e:	e065      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b59      	ldr	r3, [pc, #356]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e043      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b48      	ldr	r3, [pc, #288]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	e021      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b37      	ldr	r3, [pc, #220]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800495c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	0a5b      	lsrs	r3, r3, #9
 8004962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004976:	edd7 6a07 	vldr	s13, [r7, #28]
 800497a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	ee17 2a90 	vmov	r2, s15
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800498a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b0:	ee17 2a90 	vmov	r2, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049b8:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049de:	ee17 2a90 	vmov	r2, s15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	3724      	adds	r7, #36	@ 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	46000000 	.word	0x46000000
 8004a14:	4c742400 	.word	0x4c742400
 8004a18:	4a742400 	.word	0x4a742400
 8004a1c:	4af42400 	.word	0x4af42400

08004a20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a28:	4ba1      	ldr	r3, [pc, #644]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a32:	4b9f      	ldr	r3, [pc, #636]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a36:	0d1b      	lsrs	r3, r3, #20
 8004a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a4a:	4b99      	ldr	r3, [pc, #612]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	08db      	lsrs	r3, r3, #3
 8004a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8111 	beq.w	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	f000 8083 	beq.w	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	f200 80a1 	bhi.w	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d056      	beq.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a8a:	e099      	b.n	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a8c:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02d      	beq.n	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a98:	4b85      	ldr	r3, [pc, #532]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	08db      	lsrs	r3, r3, #3
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	4a84      	ldr	r2, [pc, #528]	@ (8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004af2:	e087      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	e065      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b59      	ldr	r3, [pc, #356]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	e043      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b48      	ldr	r3, [pc, #288]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	e021      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b37      	ldr	r3, [pc, #220]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c04:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	0a5b      	lsrs	r3, r3, #9
 8004c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2a:	ee17 2a90 	vmov	r2, s15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c32:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c58:	ee17 2a90 	vmov	r2, s15
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c60:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	0e1b      	lsrs	r3, r3, #24
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c86:	ee17 2a90 	vmov	r2, s15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	3724      	adds	r7, #36	@ 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	03d09000 	.word	0x03d09000
 8004cb8:	46000000 	.word	0x46000000
 8004cbc:	4c742400 	.word	0x4c742400
 8004cc0:	4a742400 	.word	0x4a742400
 8004cc4:	4af42400 	.word	0x4af42400

08004cc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cd6:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d101      	bne.n	8004ce6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e099      	b.n	8004e1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4e      	ldr	r2, [pc, #312]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004cec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf2:	f7fc fa19 	bl	8001128 <HAL_GetTick>
 8004cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf8:	e008      	b.n	8004d0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cfa:	f7fc fa15 	bl	8001128 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e086      	b.n	8004e1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d0c:	4b45      	ldr	r3, [pc, #276]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d18:	4b42      	ldr	r3, [pc, #264]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	031b      	lsls	r3, r3, #12
 8004d26:	493f      	ldr	r1, [pc, #252]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	025b      	lsls	r3, r3, #9
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d5c:	4931      	ldr	r1, [pc, #196]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d62:	4b30      	ldr	r3, [pc, #192]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	492d      	ldr	r1, [pc, #180]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d74:	4b2b      	ldr	r3, [pc, #172]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	f023 0220 	bic.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	4928      	ldr	r1, [pc, #160]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d86:	4b27      	ldr	r3, [pc, #156]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d96:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <RCCEx_PLL2_Config+0x160>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	69d2      	ldr	r2, [r2, #28]
 8004d9e:	00d2      	lsls	r2, r2, #3
 8004da0:	4920      	ldr	r1, [pc, #128]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004da6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	4a19      	ldr	r2, [pc, #100]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dc4:	e00f      	b.n	8004de6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d106      	bne.n	8004dda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dcc:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	4a14      	ldr	r2, [pc, #80]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd8:	e005      	b.n	8004de6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004de6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a0e      	ldr	r2, [pc, #56]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df2:	f7fc f999 	bl	8001128 <HAL_GetTick>
 8004df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df8:	e008      	b.n	8004e0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dfa:	f7fc f995 	bl	8001128 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e006      	b.n	8004e1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
 8004e28:	ffff0007 	.word	0xffff0007

08004e2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e3a:	4b53      	ldr	r3, [pc, #332]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d101      	bne.n	8004e4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e099      	b.n	8004f7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e56:	f7fc f967 	bl	8001128 <HAL_GetTick>
 8004e5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e5c:	e008      	b.n	8004e70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5e:	f7fc f963 	bl	8001128 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e086      	b.n	8004f7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e70:	4b45      	ldr	r3, [pc, #276]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e7c:	4b42      	ldr	r3, [pc, #264]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	051b      	lsls	r3, r3, #20
 8004e8a:	493f      	ldr	r1, [pc, #252]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	025b      	lsls	r3, r3, #9
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	061b      	lsls	r3, r3, #24
 8004ebc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ec0:	4931      	ldr	r1, [pc, #196]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ec6:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	492d      	ldr	r1, [pc, #180]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4928      	ldr	r1, [pc, #160]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eea:	4b27      	ldr	r3, [pc, #156]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004efa:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <RCCEx_PLL3_Config+0x160>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	69d2      	ldr	r2, [r2, #28]
 8004f02:	00d2      	lsls	r2, r2, #3
 8004f04:	4920      	ldr	r1, [pc, #128]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a19      	ldr	r2, [pc, #100]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f28:	e00f      	b.n	8004f4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f30:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4a14      	ldr	r2, [pc, #80]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f3c:	e005      	b.n	8004f4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f3e:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	4a11      	ldr	r2, [pc, #68]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f56:	f7fc f8e7 	bl	8001128 <HAL_GetTick>
 8004f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f5c:	e008      	b.n	8004f70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f5e:	f7fc f8e3 	bl	8001128 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	ffff0007 	.word	0xffff0007

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb fe5e 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 f92e 	bl	8005230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIM_ConfigClockSource+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0dc      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x1d6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005078:	4013      	ands	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a64      	ldr	r2, [pc, #400]	@ (8005224 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f000 80a9 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005098:	4a62      	ldr	r2, [pc, #392]	@ (8005224 <HAL_TIM_ConfigClockSource+0x1e4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f200 80ae 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050a0:	4a61      	ldr	r2, [pc, #388]	@ (8005228 <HAL_TIM_ConfigClockSource+0x1e8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f000 80a1 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 80050a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005228 <HAL_TIM_ConfigClockSource+0x1e8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f200 80a6 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050b0:	4a5e      	ldr	r2, [pc, #376]	@ (800522c <HAL_TIM_ConfigClockSource+0x1ec>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	f000 8099 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 80050b8:	4a5c      	ldr	r2, [pc, #368]	@ (800522c <HAL_TIM_ConfigClockSource+0x1ec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	f200 809e 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050c4:	f000 8091 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 80050c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050cc:	f200 8096 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d4:	f000 8089 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 80050d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050dc:	f200 808e 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0x124>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	f000 8086 	beq.w	8005202 <HAL_TIM_ConfigClockSource+0x1c2>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 80050fc:	2b70      	cmp	r3, #112	@ 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xf6>
 8005100:	2b70      	cmp	r3, #112	@ 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005104:	2b60      	cmp	r3, #96	@ 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x16a>
 8005108:	2b60      	cmp	r3, #96	@ 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 800510c:	2b50      	cmp	r3, #80	@ 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x14a>
 8005110:	2b50      	cmp	r3, #80	@ 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x18a>
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 800511c:	2b30      	cmp	r3, #48	@ 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005120:	2b30      	cmp	r3, #48	@ 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x1aa>
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	f000 f98b 	bl	8005460 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04f      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	f000 f974 	bl	8005460 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f8e4 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	@ 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f93e 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 f903 	bl	80053c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	@ 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f92e 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 f8c4 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	@ 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f91e 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 f915 	bl	8005424 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e003      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e000      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	ffceff88 	.word	0xffceff88
 8005224:	00100040 	.word	0x00100040
 8005228:	00100030 	.word	0x00100030
 800522c:	00100020 	.word	0x00100020

08005230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a40      	ldr	r2, [pc, #256]	@ (8005344 <TIM_Base_SetConfig+0x114>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d013      	beq.n	8005270 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524e:	d00f      	beq.n	8005270 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3d      	ldr	r2, [pc, #244]	@ (8005348 <TIM_Base_SetConfig+0x118>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3c      	ldr	r2, [pc, #240]	@ (800534c <TIM_Base_SetConfig+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3b      	ldr	r2, [pc, #236]	@ (8005350 <TIM_Base_SetConfig+0x120>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3a      	ldr	r2, [pc, #232]	@ (8005354 <TIM_Base_SetConfig+0x124>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2f      	ldr	r2, [pc, #188]	@ (8005344 <TIM_Base_SetConfig+0x114>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005290:	d01b      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2c      	ldr	r2, [pc, #176]	@ (8005348 <TIM_Base_SetConfig+0x118>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d017      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2b      	ldr	r2, [pc, #172]	@ (800534c <TIM_Base_SetConfig+0x11c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005350 <TIM_Base_SetConfig+0x120>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00f      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a29      	ldr	r2, [pc, #164]	@ (8005354 <TIM_Base_SetConfig+0x124>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00b      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a28      	ldr	r2, [pc, #160]	@ (8005358 <TIM_Base_SetConfig+0x128>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a27      	ldr	r2, [pc, #156]	@ (800535c <TIM_Base_SetConfig+0x12c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_Base_SetConfig+0x9a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <TIM_Base_SetConfig+0x130>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a10      	ldr	r2, [pc, #64]	@ (8005344 <TIM_Base_SetConfig+0x114>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_Base_SetConfig+0xf8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <TIM_Base_SetConfig+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0xf8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a11      	ldr	r2, [pc, #68]	@ (8005358 <TIM_Base_SetConfig+0x128>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a10      	ldr	r2, [pc, #64]	@ (800535c <TIM_Base_SetConfig+0x12c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0xf8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0f      	ldr	r2, [pc, #60]	@ (8005360 <TIM_Base_SetConfig+0x130>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d103      	bne.n	8005330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	615a      	str	r2, [r3, #20]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0201 	bic.w	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 030a 	bic.w	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0210 	bic.w	r2, r3, #16
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <TIM_ITRx_SetConfig+0x38>)
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	f043 0307 	orr.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	609a      	str	r2, [r3, #8]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	ffcfff8f 	.word	0xffcfff8f

08005460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800547a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	431a      	orrs	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e06d      	b.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a30      	ldr	r2, [pc, #192]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2f      	ldr	r2, [pc, #188]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a20      	ldr	r2, [pc, #128]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552a:	d01d      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1a      	ldr	r2, [pc, #104]	@ (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a15      	ldr	r2, [pc, #84]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10c      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800556e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40001800 	.word	0x40001800
 80055b8:	40014000 	.word	0x40014000

080055bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e042      	b.n	8005654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb fb6b 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2224      	movs	r2, #36	@ 0x24
 80055ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fc06 	bl	8005e10 <UART_SetConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fa66 	bl	8006ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800562a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800563a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 faed 	bl	8006c2c <UART_CheckIdleState>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0ba      	sub	sp, #232	@ 0xe8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005686:	f640 030f 	movw	r3, #2063	@ 0x80f
 800568a:	4013      	ands	r3, r2
 800568c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11b      	bne.n	80056d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d009      	beq.n	80056d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8377 	beq.w	8005db4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
      }
      return;
 80056ce:	e371      	b.n	8005db4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8123 	beq.w	8005920 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80056de:	4b8d      	ldr	r3, [pc, #564]	@ (8005914 <HAL_UART_IRQHandler+0x2b8>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005918 <HAL_UART_IRQHandler+0x2bc>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8116 	beq.w	8005920 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <HAL_UART_IRQHandler+0xc8>
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d011      	beq.n	8005754 <HAL_UART_IRQHandler+0xf8>
 8005730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2202      	movs	r2, #2
 8005742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574a:	f043 0204 	orr.w	r2, r3, #4
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d011      	beq.n	8005784 <HAL_UART_IRQHandler+0x128>
 8005760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2204      	movs	r2, #4
 8005772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800579c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005914 <HAL_UART_IRQHandler+0x2b8>)
 80057a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2208      	movs	r2, #8
 80057ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f043 0208 	orr.w	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <HAL_UART_IRQHandler+0x196>
 80057cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00c      	beq.n	80057f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 82dd 	beq.w	8005db8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d105      	bne.n	8005822 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b40      	cmp	r3, #64	@ 0x40
 8005848:	d005      	beq.n	8005856 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800584a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d054      	beq.n	8005900 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fafa 	bl	8006e50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d146      	bne.n	80058f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3308      	adds	r3, #8
 8005870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800589a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d9      	bne.n	800586a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c6:	4a15      	ldr	r2, [pc, #84]	@ (800591c <HAL_UART_IRQHandler+0x2c0>)
 80058c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fc f955 	bl	8001b80 <HAL_DMA_Abort_IT>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d019      	beq.n	8005910 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ee:	e00f      	b.n	8005910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fa77 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	e00b      	b.n	8005910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa73 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fe:	e007      	b.n	8005910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa6f 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800590e:	e253      	b.n	8005db8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005910:	bf00      	nop
    return;
 8005912:	e251      	b.n	8005db8 <HAL_UART_IRQHandler+0x75c>
 8005914:	10000001 	.word	0x10000001
 8005918:	04000120 	.word	0x04000120
 800591c:	08006f1d 	.word	0x08006f1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005924:	2b01      	cmp	r3, #1
 8005926:	f040 81e7 	bne.w	8005cf8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 81e0 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 81d9 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	f040 8151 	bne.w	8005c00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a96      	ldr	r2, [pc, #600]	@ (8005bc0 <HAL_UART_IRQHandler+0x564>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d068      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a93      	ldr	r2, [pc, #588]	@ (8005bc4 <HAL_UART_IRQHandler+0x568>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d061      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a91      	ldr	r2, [pc, #580]	@ (8005bc8 <HAL_UART_IRQHandler+0x56c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d05a      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a8e      	ldr	r2, [pc, #568]	@ (8005bcc <HAL_UART_IRQHandler+0x570>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d053      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a8c      	ldr	r2, [pc, #560]	@ (8005bd0 <HAL_UART_IRQHandler+0x574>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d04c      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a89      	ldr	r2, [pc, #548]	@ (8005bd4 <HAL_UART_IRQHandler+0x578>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a87      	ldr	r2, [pc, #540]	@ (8005bd8 <HAL_UART_IRQHandler+0x57c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d03e      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a84      	ldr	r2, [pc, #528]	@ (8005bdc <HAL_UART_IRQHandler+0x580>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d037      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a82      	ldr	r2, [pc, #520]	@ (8005be0 <HAL_UART_IRQHandler+0x584>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d030      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a7f      	ldr	r2, [pc, #508]	@ (8005be4 <HAL_UART_IRQHandler+0x588>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d029      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a7d      	ldr	r2, [pc, #500]	@ (8005be8 <HAL_UART_IRQHandler+0x58c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a7a      	ldr	r2, [pc, #488]	@ (8005bec <HAL_UART_IRQHandler+0x590>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01b      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a78      	ldr	r2, [pc, #480]	@ (8005bf0 <HAL_UART_IRQHandler+0x594>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d014      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a75      	ldr	r2, [pc, #468]	@ (8005bf4 <HAL_UART_IRQHandler+0x598>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00d      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a73      	ldr	r2, [pc, #460]	@ (8005bf8 <HAL_UART_IRQHandler+0x59c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d006      	beq.n	8005a3e <HAL_UART_IRQHandler+0x3e2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a70      	ldr	r2, [pc, #448]	@ (8005bfc <HAL_UART_IRQHandler+0x5a0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d106      	bne.n	8005a4c <HAL_UART_IRQHandler+0x3f0>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	e005      	b.n	8005a58 <HAL_UART_IRQHandler+0x3fc>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 81ab 	beq.w	8005dbc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a70:	429a      	cmp	r2, r3
 8005a72:	f080 81a3 	bcs.w	8005dbc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a8c:	f000 8087 	beq.w	8005b9e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005abe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1da      	bne.n	8005a90 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3308      	adds	r3, #8
 8005afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005afe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e1      	bne.n	8005ada <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e3      	bne.n	8005b16 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b6c:	f023 0310 	bic.w	r3, r3, #16
 8005b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e4      	bne.n	8005b5c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fb fcd3 	bl	8001544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f91d 	bl	8005df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bbe:	e0fd      	b.n	8005dbc <HAL_UART_IRQHandler+0x760>
 8005bc0:	40020010 	.word	0x40020010
 8005bc4:	40020028 	.word	0x40020028
 8005bc8:	40020040 	.word	0x40020040
 8005bcc:	40020058 	.word	0x40020058
 8005bd0:	40020070 	.word	0x40020070
 8005bd4:	40020088 	.word	0x40020088
 8005bd8:	400200a0 	.word	0x400200a0
 8005bdc:	400200b8 	.word	0x400200b8
 8005be0:	40020410 	.word	0x40020410
 8005be4:	40020428 	.word	0x40020428
 8005be8:	40020440 	.word	0x40020440
 8005bec:	40020458 	.word	0x40020458
 8005bf0:	40020470 	.word	0x40020470
 8005bf4:	40020488 	.word	0x40020488
 8005bf8:	400204a0 	.word	0x400204a0
 8005bfc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80cf 	beq.w	8005dc0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80ca 	beq.w	8005dc0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e4      	bne.n	8005c2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	623b      	str	r3, [r7, #32]
   return(result);
 8005c72:	6a3a      	ldr	r2, [r7, #32]
 8005c74:	4b55      	ldr	r3, [pc, #340]	@ (8005dcc <HAL_UART_IRQHandler+0x770>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c86:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e4      	bne.n	8005cae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f881 	bl	8005df8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf6:	e063      	b.n	8005dc0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <HAL_UART_IRQHandler+0x6c6>
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f93f 	bl	8006f9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d20:	e051      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d105      	bne.n	8005d46 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03a      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
    }
    return;
 8005d56:	e035      	b.n	8005dc4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_UART_IRQHandler+0x71c>
 8005d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f8e9 	bl	8006f48 <UART_EndTransmit_IT>
    return;
 8005d76:	e026      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_UART_IRQHandler+0x73c>
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 f918 	bl	8006fc6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d96:	e016      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da0c      	bge.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f900 	bl	8006fb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005db2:	e008      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005db4:	bf00      	nop
 8005db6:	e006      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8005db8:	bf00      	nop
 8005dba:	e004      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005dbc:	bf00      	nop
 8005dbe:	e002      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
      return;
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_IRQHandler+0x76a>
    return;
 8005dc4:	bf00      	nop
  }
}
 8005dc6:	37e8      	adds	r7, #232	@ 0xe8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	effffffe 	.word	0xeffffffe

08005dd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e14:	b092      	sub	sp, #72	@ 0x48
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4bbe      	ldr	r3, [pc, #760]	@ (8006138 <UART_SetConfig+0x328>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4ab3      	ldr	r2, [pc, #716]	@ (800613c <UART_SetConfig+0x32c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	4baf      	ldr	r3, [pc, #700]	@ (8006140 <UART_SetConfig+0x330>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	f023 010f 	bic.w	r1, r3, #15
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4aa6      	ldr	r2, [pc, #664]	@ (8006144 <UART_SetConfig+0x334>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d177      	bne.n	8005fa0 <UART_SetConfig+0x190>
 8005eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8006148 <UART_SetConfig+0x338>)
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eb8:	2b28      	cmp	r3, #40	@ 0x28
 8005eba:	d86d      	bhi.n	8005f98 <UART_SetConfig+0x188>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0xb4>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005f69 	.word	0x08005f69
 8005ec8:	08005f99 	.word	0x08005f99
 8005ecc:	08005f99 	.word	0x08005f99
 8005ed0:	08005f99 	.word	0x08005f99
 8005ed4:	08005f99 	.word	0x08005f99
 8005ed8:	08005f99 	.word	0x08005f99
 8005edc:	08005f99 	.word	0x08005f99
 8005ee0:	08005f99 	.word	0x08005f99
 8005ee4:	08005f71 	.word	0x08005f71
 8005ee8:	08005f99 	.word	0x08005f99
 8005eec:	08005f99 	.word	0x08005f99
 8005ef0:	08005f99 	.word	0x08005f99
 8005ef4:	08005f99 	.word	0x08005f99
 8005ef8:	08005f99 	.word	0x08005f99
 8005efc:	08005f99 	.word	0x08005f99
 8005f00:	08005f99 	.word	0x08005f99
 8005f04:	08005f79 	.word	0x08005f79
 8005f08:	08005f99 	.word	0x08005f99
 8005f0c:	08005f99 	.word	0x08005f99
 8005f10:	08005f99 	.word	0x08005f99
 8005f14:	08005f99 	.word	0x08005f99
 8005f18:	08005f99 	.word	0x08005f99
 8005f1c:	08005f99 	.word	0x08005f99
 8005f20:	08005f99 	.word	0x08005f99
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f99 	.word	0x08005f99
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f89 	.word	0x08005f89
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f99 	.word	0x08005f99
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e326      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e322      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e31e      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e31a      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e316      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f90:	2340      	movs	r3, #64	@ 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e312      	b.n	80065be <UART_SetConfig+0x7ae>
 8005f98:	2380      	movs	r3, #128	@ 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e30e      	b.n	80065be <UART_SetConfig+0x7ae>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a69      	ldr	r2, [pc, #420]	@ (800614c <UART_SetConfig+0x33c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d130      	bne.n	800600c <UART_SetConfig+0x1fc>
 8005faa:	4b67      	ldr	r3, [pc, #412]	@ (8006148 <UART_SetConfig+0x338>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d826      	bhi.n	8006004 <UART_SetConfig+0x1f4>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x1ac>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e2f0      	b.n	80065be <UART_SetConfig+0x7ae>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e2ec      	b.n	80065be <UART_SetConfig+0x7ae>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e2e8      	b.n	80065be <UART_SetConfig+0x7ae>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e2e4      	b.n	80065be <UART_SetConfig+0x7ae>
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e2e0      	b.n	80065be <UART_SetConfig+0x7ae>
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e2dc      	b.n	80065be <UART_SetConfig+0x7ae>
 8006004:	2380      	movs	r3, #128	@ 0x80
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e2d8      	b.n	80065be <UART_SetConfig+0x7ae>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a4f      	ldr	r2, [pc, #316]	@ (8006150 <UART_SetConfig+0x340>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d130      	bne.n	8006078 <UART_SetConfig+0x268>
 8006016:	4b4c      	ldr	r3, [pc, #304]	@ (8006148 <UART_SetConfig+0x338>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b05      	cmp	r3, #5
 8006020:	d826      	bhi.n	8006070 <UART_SetConfig+0x260>
 8006022:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <UART_SetConfig+0x218>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006041 	.word	0x08006041
 800602c:	08006049 	.word	0x08006049
 8006030:	08006051 	.word	0x08006051
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e2ba      	b.n	80065be <UART_SetConfig+0x7ae>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e2b6      	b.n	80065be <UART_SetConfig+0x7ae>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e2b2      	b.n	80065be <UART_SetConfig+0x7ae>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e2ae      	b.n	80065be <UART_SetConfig+0x7ae>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e2aa      	b.n	80065be <UART_SetConfig+0x7ae>
 8006068:	2340      	movs	r3, #64	@ 0x40
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e2a6      	b.n	80065be <UART_SetConfig+0x7ae>
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e2a2      	b.n	80065be <UART_SetConfig+0x7ae>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a35      	ldr	r2, [pc, #212]	@ (8006154 <UART_SetConfig+0x344>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d130      	bne.n	80060e4 <UART_SetConfig+0x2d4>
 8006082:	4b31      	ldr	r3, [pc, #196]	@ (8006148 <UART_SetConfig+0x338>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d826      	bhi.n	80060dc <UART_SetConfig+0x2cc>
 800608e:	a201      	add	r2, pc, #4	@ (adr r2, 8006094 <UART_SetConfig+0x284>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e284      	b.n	80065be <UART_SetConfig+0x7ae>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e280      	b.n	80065be <UART_SetConfig+0x7ae>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e27c      	b.n	80065be <UART_SetConfig+0x7ae>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e278      	b.n	80065be <UART_SetConfig+0x7ae>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e274      	b.n	80065be <UART_SetConfig+0x7ae>
 80060d4:	2340      	movs	r3, #64	@ 0x40
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e270      	b.n	80065be <UART_SetConfig+0x7ae>
 80060dc:	2380      	movs	r3, #128	@ 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e26c      	b.n	80065be <UART_SetConfig+0x7ae>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <UART_SetConfig+0x348>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d142      	bne.n	8006174 <UART_SetConfig+0x364>
 80060ee:	4b16      	ldr	r3, [pc, #88]	@ (8006148 <UART_SetConfig+0x338>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d838      	bhi.n	800616c <UART_SetConfig+0x35c>
 80060fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <UART_SetConfig+0x2f0>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006119 	.word	0x08006119
 8006104:	08006121 	.word	0x08006121
 8006108:	08006129 	.word	0x08006129
 800610c:	08006131 	.word	0x08006131
 8006110:	0800615d 	.word	0x0800615d
 8006114:	08006165 	.word	0x08006165
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e24e      	b.n	80065be <UART_SetConfig+0x7ae>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e24a      	b.n	80065be <UART_SetConfig+0x7ae>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e246      	b.n	80065be <UART_SetConfig+0x7ae>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e242      	b.n	80065be <UART_SetConfig+0x7ae>
 8006138:	cfff69f3 	.word	0xcfff69f3
 800613c:	58000c00 	.word	0x58000c00
 8006140:	11fff4ff 	.word	0x11fff4ff
 8006144:	40011000 	.word	0x40011000
 8006148:	58024400 	.word	0x58024400
 800614c:	40004400 	.word	0x40004400
 8006150:	40004800 	.word	0x40004800
 8006154:	40004c00 	.word	0x40004c00
 8006158:	40005000 	.word	0x40005000
 800615c:	2320      	movs	r3, #32
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e22c      	b.n	80065be <UART_SetConfig+0x7ae>
 8006164:	2340      	movs	r3, #64	@ 0x40
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e228      	b.n	80065be <UART_SetConfig+0x7ae>
 800616c:	2380      	movs	r3, #128	@ 0x80
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e224      	b.n	80065be <UART_SetConfig+0x7ae>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4ab1      	ldr	r2, [pc, #708]	@ (8006440 <UART_SetConfig+0x630>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d176      	bne.n	800626c <UART_SetConfig+0x45c>
 800617e:	4bb1      	ldr	r3, [pc, #708]	@ (8006444 <UART_SetConfig+0x634>)
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006186:	2b28      	cmp	r3, #40	@ 0x28
 8006188:	d86c      	bhi.n	8006264 <UART_SetConfig+0x454>
 800618a:	a201      	add	r2, pc, #4	@ (adr r2, 8006190 <UART_SetConfig+0x380>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	08006235 	.word	0x08006235
 8006194:	08006265 	.word	0x08006265
 8006198:	08006265 	.word	0x08006265
 800619c:	08006265 	.word	0x08006265
 80061a0:	08006265 	.word	0x08006265
 80061a4:	08006265 	.word	0x08006265
 80061a8:	08006265 	.word	0x08006265
 80061ac:	08006265 	.word	0x08006265
 80061b0:	0800623d 	.word	0x0800623d
 80061b4:	08006265 	.word	0x08006265
 80061b8:	08006265 	.word	0x08006265
 80061bc:	08006265 	.word	0x08006265
 80061c0:	08006265 	.word	0x08006265
 80061c4:	08006265 	.word	0x08006265
 80061c8:	08006265 	.word	0x08006265
 80061cc:	08006265 	.word	0x08006265
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006265 	.word	0x08006265
 80061d8:	08006265 	.word	0x08006265
 80061dc:	08006265 	.word	0x08006265
 80061e0:	08006265 	.word	0x08006265
 80061e4:	08006265 	.word	0x08006265
 80061e8:	08006265 	.word	0x08006265
 80061ec:	08006265 	.word	0x08006265
 80061f0:	0800624d 	.word	0x0800624d
 80061f4:	08006265 	.word	0x08006265
 80061f8:	08006265 	.word	0x08006265
 80061fc:	08006265 	.word	0x08006265
 8006200:	08006265 	.word	0x08006265
 8006204:	08006265 	.word	0x08006265
 8006208:	08006265 	.word	0x08006265
 800620c:	08006265 	.word	0x08006265
 8006210:	08006255 	.word	0x08006255
 8006214:	08006265 	.word	0x08006265
 8006218:	08006265 	.word	0x08006265
 800621c:	08006265 	.word	0x08006265
 8006220:	08006265 	.word	0x08006265
 8006224:	08006265 	.word	0x08006265
 8006228:	08006265 	.word	0x08006265
 800622c:	08006265 	.word	0x08006265
 8006230:	0800625d 	.word	0x0800625d
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e1c0      	b.n	80065be <UART_SetConfig+0x7ae>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e1bc      	b.n	80065be <UART_SetConfig+0x7ae>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e1b8      	b.n	80065be <UART_SetConfig+0x7ae>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e1b4      	b.n	80065be <UART_SetConfig+0x7ae>
 8006254:	2320      	movs	r3, #32
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e1b0      	b.n	80065be <UART_SetConfig+0x7ae>
 800625c:	2340      	movs	r3, #64	@ 0x40
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e1ac      	b.n	80065be <UART_SetConfig+0x7ae>
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e1a8      	b.n	80065be <UART_SetConfig+0x7ae>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a75      	ldr	r2, [pc, #468]	@ (8006448 <UART_SetConfig+0x638>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d130      	bne.n	80062d8 <UART_SetConfig+0x4c8>
 8006276:	4b73      	ldr	r3, [pc, #460]	@ (8006444 <UART_SetConfig+0x634>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	2b05      	cmp	r3, #5
 8006280:	d826      	bhi.n	80062d0 <UART_SetConfig+0x4c0>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0x478>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e18a      	b.n	80065be <UART_SetConfig+0x7ae>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e186      	b.n	80065be <UART_SetConfig+0x7ae>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e182      	b.n	80065be <UART_SetConfig+0x7ae>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e17e      	b.n	80065be <UART_SetConfig+0x7ae>
 80062c0:	2320      	movs	r3, #32
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e17a      	b.n	80065be <UART_SetConfig+0x7ae>
 80062c8:	2340      	movs	r3, #64	@ 0x40
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e176      	b.n	80065be <UART_SetConfig+0x7ae>
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e172      	b.n	80065be <UART_SetConfig+0x7ae>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5b      	ldr	r2, [pc, #364]	@ (800644c <UART_SetConfig+0x63c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d130      	bne.n	8006344 <UART_SetConfig+0x534>
 80062e2:	4b58      	ldr	r3, [pc, #352]	@ (8006444 <UART_SetConfig+0x634>)
 80062e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d826      	bhi.n	800633c <UART_SetConfig+0x52c>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x4e4>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006315 	.word	0x08006315
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006325 	.word	0x08006325
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006335 	.word	0x08006335
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006312:	e154      	b.n	80065be <UART_SetConfig+0x7ae>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631a:	e150      	b.n	80065be <UART_SetConfig+0x7ae>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006322:	e14c      	b.n	80065be <UART_SetConfig+0x7ae>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e148      	b.n	80065be <UART_SetConfig+0x7ae>
 800632c:	2320      	movs	r3, #32
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e144      	b.n	80065be <UART_SetConfig+0x7ae>
 8006334:	2340      	movs	r3, #64	@ 0x40
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e140      	b.n	80065be <UART_SetConfig+0x7ae>
 800633c:	2380      	movs	r3, #128	@ 0x80
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e13c      	b.n	80065be <UART_SetConfig+0x7ae>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a41      	ldr	r2, [pc, #260]	@ (8006450 <UART_SetConfig+0x640>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f040 8082 	bne.w	8006454 <UART_SetConfig+0x644>
 8006350:	4b3c      	ldr	r3, [pc, #240]	@ (8006444 <UART_SetConfig+0x634>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006358:	2b28      	cmp	r3, #40	@ 0x28
 800635a:	d86d      	bhi.n	8006438 <UART_SetConfig+0x628>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <UART_SetConfig+0x554>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006409 	.word	0x08006409
 8006368:	08006439 	.word	0x08006439
 800636c:	08006439 	.word	0x08006439
 8006370:	08006439 	.word	0x08006439
 8006374:	08006439 	.word	0x08006439
 8006378:	08006439 	.word	0x08006439
 800637c:	08006439 	.word	0x08006439
 8006380:	08006439 	.word	0x08006439
 8006384:	08006411 	.word	0x08006411
 8006388:	08006439 	.word	0x08006439
 800638c:	08006439 	.word	0x08006439
 8006390:	08006439 	.word	0x08006439
 8006394:	08006439 	.word	0x08006439
 8006398:	08006439 	.word	0x08006439
 800639c:	08006439 	.word	0x08006439
 80063a0:	08006439 	.word	0x08006439
 80063a4:	08006419 	.word	0x08006419
 80063a8:	08006439 	.word	0x08006439
 80063ac:	08006439 	.word	0x08006439
 80063b0:	08006439 	.word	0x08006439
 80063b4:	08006439 	.word	0x08006439
 80063b8:	08006439 	.word	0x08006439
 80063bc:	08006439 	.word	0x08006439
 80063c0:	08006439 	.word	0x08006439
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006439 	.word	0x08006439
 80063cc:	08006439 	.word	0x08006439
 80063d0:	08006439 	.word	0x08006439
 80063d4:	08006439 	.word	0x08006439
 80063d8:	08006439 	.word	0x08006439
 80063dc:	08006439 	.word	0x08006439
 80063e0:	08006439 	.word	0x08006439
 80063e4:	08006429 	.word	0x08006429
 80063e8:	08006439 	.word	0x08006439
 80063ec:	08006439 	.word	0x08006439
 80063f0:	08006439 	.word	0x08006439
 80063f4:	08006439 	.word	0x08006439
 80063f8:	08006439 	.word	0x08006439
 80063fc:	08006439 	.word	0x08006439
 8006400:	08006439 	.word	0x08006439
 8006404:	08006431 	.word	0x08006431
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e0d6      	b.n	80065be <UART_SetConfig+0x7ae>
 8006410:	2304      	movs	r3, #4
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e0d2      	b.n	80065be <UART_SetConfig+0x7ae>
 8006418:	2308      	movs	r3, #8
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e0ce      	b.n	80065be <UART_SetConfig+0x7ae>
 8006420:	2310      	movs	r3, #16
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e0ca      	b.n	80065be <UART_SetConfig+0x7ae>
 8006428:	2320      	movs	r3, #32
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e0c6      	b.n	80065be <UART_SetConfig+0x7ae>
 8006430:	2340      	movs	r3, #64	@ 0x40
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e0c2      	b.n	80065be <UART_SetConfig+0x7ae>
 8006438:	2380      	movs	r3, #128	@ 0x80
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e0be      	b.n	80065be <UART_SetConfig+0x7ae>
 8006440:	40011400 	.word	0x40011400
 8006444:	58024400 	.word	0x58024400
 8006448:	40007800 	.word	0x40007800
 800644c:	40007c00 	.word	0x40007c00
 8006450:	40011800 	.word	0x40011800
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4aad      	ldr	r2, [pc, #692]	@ (8006710 <UART_SetConfig+0x900>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d176      	bne.n	800654c <UART_SetConfig+0x73c>
 800645e:	4bad      	ldr	r3, [pc, #692]	@ (8006714 <UART_SetConfig+0x904>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006466:	2b28      	cmp	r3, #40	@ 0x28
 8006468:	d86c      	bhi.n	8006544 <UART_SetConfig+0x734>
 800646a:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0x660>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006515 	.word	0x08006515
 8006474:	08006545 	.word	0x08006545
 8006478:	08006545 	.word	0x08006545
 800647c:	08006545 	.word	0x08006545
 8006480:	08006545 	.word	0x08006545
 8006484:	08006545 	.word	0x08006545
 8006488:	08006545 	.word	0x08006545
 800648c:	08006545 	.word	0x08006545
 8006490:	0800651d 	.word	0x0800651d
 8006494:	08006545 	.word	0x08006545
 8006498:	08006545 	.word	0x08006545
 800649c:	08006545 	.word	0x08006545
 80064a0:	08006545 	.word	0x08006545
 80064a4:	08006545 	.word	0x08006545
 80064a8:	08006545 	.word	0x08006545
 80064ac:	08006545 	.word	0x08006545
 80064b0:	08006525 	.word	0x08006525
 80064b4:	08006545 	.word	0x08006545
 80064b8:	08006545 	.word	0x08006545
 80064bc:	08006545 	.word	0x08006545
 80064c0:	08006545 	.word	0x08006545
 80064c4:	08006545 	.word	0x08006545
 80064c8:	08006545 	.word	0x08006545
 80064cc:	08006545 	.word	0x08006545
 80064d0:	0800652d 	.word	0x0800652d
 80064d4:	08006545 	.word	0x08006545
 80064d8:	08006545 	.word	0x08006545
 80064dc:	08006545 	.word	0x08006545
 80064e0:	08006545 	.word	0x08006545
 80064e4:	08006545 	.word	0x08006545
 80064e8:	08006545 	.word	0x08006545
 80064ec:	08006545 	.word	0x08006545
 80064f0:	08006535 	.word	0x08006535
 80064f4:	08006545 	.word	0x08006545
 80064f8:	08006545 	.word	0x08006545
 80064fc:	08006545 	.word	0x08006545
 8006500:	08006545 	.word	0x08006545
 8006504:	08006545 	.word	0x08006545
 8006508:	08006545 	.word	0x08006545
 800650c:	08006545 	.word	0x08006545
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e050      	b.n	80065be <UART_SetConfig+0x7ae>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e04c      	b.n	80065be <UART_SetConfig+0x7ae>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e048      	b.n	80065be <UART_SetConfig+0x7ae>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e044      	b.n	80065be <UART_SetConfig+0x7ae>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e040      	b.n	80065be <UART_SetConfig+0x7ae>
 800653c:	2340      	movs	r3, #64	@ 0x40
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e03c      	b.n	80065be <UART_SetConfig+0x7ae>
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654a:	e038      	b.n	80065be <UART_SetConfig+0x7ae>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a71      	ldr	r2, [pc, #452]	@ (8006718 <UART_SetConfig+0x908>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d130      	bne.n	80065b8 <UART_SetConfig+0x7a8>
 8006556:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <UART_SetConfig+0x904>)
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b05      	cmp	r3, #5
 8006560:	d826      	bhi.n	80065b0 <UART_SetConfig+0x7a0>
 8006562:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x758>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	08006581 	.word	0x08006581
 800656c:	08006589 	.word	0x08006589
 8006570:	08006591 	.word	0x08006591
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2302      	movs	r3, #2
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e01a      	b.n	80065be <UART_SetConfig+0x7ae>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e016      	b.n	80065be <UART_SetConfig+0x7ae>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e012      	b.n	80065be <UART_SetConfig+0x7ae>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e00e      	b.n	80065be <UART_SetConfig+0x7ae>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e00a      	b.n	80065be <UART_SetConfig+0x7ae>
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e006      	b.n	80065be <UART_SetConfig+0x7ae>
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e002      	b.n	80065be <UART_SetConfig+0x7ae>
 80065b8:	2380      	movs	r3, #128	@ 0x80
 80065ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a55      	ldr	r2, [pc, #340]	@ (8006718 <UART_SetConfig+0x908>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	f040 80f8 	bne.w	80067ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	dc46      	bgt.n	8006660 <UART_SetConfig+0x850>
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	db75      	blt.n	80066c2 <UART_SetConfig+0x8b2>
 80065d6:	3b02      	subs	r3, #2
 80065d8:	2b1e      	cmp	r3, #30
 80065da:	d872      	bhi.n	80066c2 <UART_SetConfig+0x8b2>
 80065dc:	a201      	add	r2, pc, #4	@ (adr r2, 80065e4 <UART_SetConfig+0x7d4>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	08006667 	.word	0x08006667
 80065e8:	080066c3 	.word	0x080066c3
 80065ec:	0800666f 	.word	0x0800666f
 80065f0:	080066c3 	.word	0x080066c3
 80065f4:	080066c3 	.word	0x080066c3
 80065f8:	080066c3 	.word	0x080066c3
 80065fc:	0800667f 	.word	0x0800667f
 8006600:	080066c3 	.word	0x080066c3
 8006604:	080066c3 	.word	0x080066c3
 8006608:	080066c3 	.word	0x080066c3
 800660c:	080066c3 	.word	0x080066c3
 8006610:	080066c3 	.word	0x080066c3
 8006614:	080066c3 	.word	0x080066c3
 8006618:	080066c3 	.word	0x080066c3
 800661c:	0800668f 	.word	0x0800668f
 8006620:	080066c3 	.word	0x080066c3
 8006624:	080066c3 	.word	0x080066c3
 8006628:	080066c3 	.word	0x080066c3
 800662c:	080066c3 	.word	0x080066c3
 8006630:	080066c3 	.word	0x080066c3
 8006634:	080066c3 	.word	0x080066c3
 8006638:	080066c3 	.word	0x080066c3
 800663c:	080066c3 	.word	0x080066c3
 8006640:	080066c3 	.word	0x080066c3
 8006644:	080066c3 	.word	0x080066c3
 8006648:	080066c3 	.word	0x080066c3
 800664c:	080066c3 	.word	0x080066c3
 8006650:	080066c3 	.word	0x080066c3
 8006654:	080066c3 	.word	0x080066c3
 8006658:	080066c3 	.word	0x080066c3
 800665c:	080066b5 	.word	0x080066b5
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d02a      	beq.n	80066ba <UART_SetConfig+0x8aa>
 8006664:	e02d      	b.n	80066c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006666:	f7fe f871 	bl	800474c <HAL_RCCEx_GetD3PCLK1Freq>
 800666a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800666c:	e02f      	b.n	80066ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe f880 	bl	8004778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800667c:	e027      	b.n	80066ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667e:	f107 0318 	add.w	r3, r7, #24
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe f9cc 	bl	8004a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800668c:	e01f      	b.n	80066ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800668e:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <UART_SetConfig+0x904>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800669a:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <UART_SetConfig+0x904>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	08db      	lsrs	r3, r3, #3
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	4a1d      	ldr	r2, [pc, #116]	@ (800671c <UART_SetConfig+0x90c>)
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066ac:	e00f      	b.n	80066ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80066ae:	4b1b      	ldr	r3, [pc, #108]	@ (800671c <UART_SetConfig+0x90c>)
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b2:	e00c      	b.n	80066ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <UART_SetConfig+0x910>)
 80066b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066b8:	e009      	b.n	80066ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c0:	e005      	b.n	80066ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80066cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 81ee 	beq.w	8006ab2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	4a12      	ldr	r2, [pc, #72]	@ (8006724 <UART_SetConfig+0x914>)
 80066dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d305      	bcc.n	8006706 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006702:	429a      	cmp	r2, r3
 8006704:	d910      	bls.n	8006728 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800670c:	e1d1      	b.n	8006ab2 <UART_SetConfig+0xca2>
 800670e:	bf00      	nop
 8006710:	40011c00 	.word	0x40011c00
 8006714:	58024400 	.word	0x58024400
 8006718:	58000c00 	.word	0x58000c00
 800671c:	03d09000 	.word	0x03d09000
 8006720:	003d0900 	.word	0x003d0900
 8006724:	08007260 	.word	0x08007260
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	2200      	movs	r2, #0
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	60fa      	str	r2, [r7, #12]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	4ac0      	ldr	r2, [pc, #768]	@ (8006a38 <UART_SetConfig+0xc28>)
 8006736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800673a:	b29b      	uxth	r3, r3
 800673c:	2200      	movs	r2, #0
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800674a:	f7f9 fdcf 	bl	80002ec <__aeabi_uldivmod>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4610      	mov	r0, r2
 8006754:	4619      	mov	r1, r3
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	020b      	lsls	r3, r1, #8
 8006760:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006764:	0202      	lsls	r2, r0, #8
 8006766:	6979      	ldr	r1, [r7, #20]
 8006768:	6849      	ldr	r1, [r1, #4]
 800676a:	0849      	lsrs	r1, r1, #1
 800676c:	2000      	movs	r0, #0
 800676e:	460c      	mov	r4, r1
 8006770:	4605      	mov	r5, r0
 8006772:	eb12 0804 	adds.w	r8, r2, r4
 8006776:	eb43 0905 	adc.w	r9, r3, r5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	469a      	mov	sl, r3
 8006782:	4693      	mov	fp, r2
 8006784:	4652      	mov	r2, sl
 8006786:	465b      	mov	r3, fp
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 fdae 	bl	80002ec <__aeabi_uldivmod>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4613      	mov	r3, r2
 8006796:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800679e:	d308      	bcc.n	80067b2 <UART_SetConfig+0x9a2>
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a6:	d204      	bcs.n	80067b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e17f      	b.n	8006ab2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067b8:	e17b      	b.n	8006ab2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c2:	f040 80bd 	bne.w	8006940 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80067c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	dc48      	bgt.n	8006860 <UART_SetConfig+0xa50>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db7b      	blt.n	80068ca <UART_SetConfig+0xaba>
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d879      	bhi.n	80068ca <UART_SetConfig+0xaba>
 80067d6:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <UART_SetConfig+0x9cc>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	08006867 	.word	0x08006867
 80067e0:	0800686f 	.word	0x0800686f
 80067e4:	080068cb 	.word	0x080068cb
 80067e8:	080068cb 	.word	0x080068cb
 80067ec:	08006877 	.word	0x08006877
 80067f0:	080068cb 	.word	0x080068cb
 80067f4:	080068cb 	.word	0x080068cb
 80067f8:	080068cb 	.word	0x080068cb
 80067fc:	08006887 	.word	0x08006887
 8006800:	080068cb 	.word	0x080068cb
 8006804:	080068cb 	.word	0x080068cb
 8006808:	080068cb 	.word	0x080068cb
 800680c:	080068cb 	.word	0x080068cb
 8006810:	080068cb 	.word	0x080068cb
 8006814:	080068cb 	.word	0x080068cb
 8006818:	080068cb 	.word	0x080068cb
 800681c:	08006897 	.word	0x08006897
 8006820:	080068cb 	.word	0x080068cb
 8006824:	080068cb 	.word	0x080068cb
 8006828:	080068cb 	.word	0x080068cb
 800682c:	080068cb 	.word	0x080068cb
 8006830:	080068cb 	.word	0x080068cb
 8006834:	080068cb 	.word	0x080068cb
 8006838:	080068cb 	.word	0x080068cb
 800683c:	080068cb 	.word	0x080068cb
 8006840:	080068cb 	.word	0x080068cb
 8006844:	080068cb 	.word	0x080068cb
 8006848:	080068cb 	.word	0x080068cb
 800684c:	080068cb 	.word	0x080068cb
 8006850:	080068cb 	.word	0x080068cb
 8006854:	080068cb 	.word	0x080068cb
 8006858:	080068cb 	.word	0x080068cb
 800685c:	080068bd 	.word	0x080068bd
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d02e      	beq.n	80068c2 <UART_SetConfig+0xab2>
 8006864:	e031      	b.n	80068ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006866:	f7fc fd87 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 800686a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800686c:	e033      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686e:	f7fc fd99 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 8006872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006874:	e02f      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f7fd ff7c 	bl	8004778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006884:	e027      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006886:	f107 0318 	add.w	r3, r7, #24
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe f8c8 	bl	8004a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006894:	e01f      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006896:	4b69      	ldr	r3, [pc, #420]	@ (8006a3c <UART_SetConfig+0xc2c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068a2:	4b66      	ldr	r3, [pc, #408]	@ (8006a3c <UART_SetConfig+0xc2c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	4a64      	ldr	r2, [pc, #400]	@ (8006a40 <UART_SetConfig+0xc30>)
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068b4:	e00f      	b.n	80068d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80068b6:	4b62      	ldr	r3, [pc, #392]	@ (8006a40 <UART_SetConfig+0xc30>)
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ba:	e00c      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068bc:	4b61      	ldr	r3, [pc, #388]	@ (8006a44 <UART_SetConfig+0xc34>)
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c0:	e009      	b.n	80068d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068c8:	e005      	b.n	80068d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80ea 	beq.w	8006ab2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	4a55      	ldr	r2, [pc, #340]	@ (8006a38 <UART_SetConfig+0xc28>)
 80068e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e8:	461a      	mov	r2, r3
 80068ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f0:	005a      	lsls	r2, r3, #1
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	441a      	add	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006902:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d916      	bls.n	8006938 <UART_SetConfig+0xb28>
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d212      	bcs.n	8006938 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	b29b      	uxth	r3, r3
 8006916:	f023 030f 	bic.w	r3, r3, #15
 800691a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	b29b      	uxth	r3, r3
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	b29a      	uxth	r2, r3
 8006928:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800692a:	4313      	orrs	r3, r2
 800692c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e0bc      	b.n	8006ab2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800693e:	e0b8      	b.n	8006ab2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006940:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006944:	2b20      	cmp	r3, #32
 8006946:	dc4b      	bgt.n	80069e0 <UART_SetConfig+0xbd0>
 8006948:	2b00      	cmp	r3, #0
 800694a:	f2c0 8087 	blt.w	8006a5c <UART_SetConfig+0xc4c>
 800694e:	2b20      	cmp	r3, #32
 8006950:	f200 8084 	bhi.w	8006a5c <UART_SetConfig+0xc4c>
 8006954:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0xb4c>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	080069e7 	.word	0x080069e7
 8006960:	080069ef 	.word	0x080069ef
 8006964:	08006a5d 	.word	0x08006a5d
 8006968:	08006a5d 	.word	0x08006a5d
 800696c:	080069f7 	.word	0x080069f7
 8006970:	08006a5d 	.word	0x08006a5d
 8006974:	08006a5d 	.word	0x08006a5d
 8006978:	08006a5d 	.word	0x08006a5d
 800697c:	08006a07 	.word	0x08006a07
 8006980:	08006a5d 	.word	0x08006a5d
 8006984:	08006a5d 	.word	0x08006a5d
 8006988:	08006a5d 	.word	0x08006a5d
 800698c:	08006a5d 	.word	0x08006a5d
 8006990:	08006a5d 	.word	0x08006a5d
 8006994:	08006a5d 	.word	0x08006a5d
 8006998:	08006a5d 	.word	0x08006a5d
 800699c:	08006a17 	.word	0x08006a17
 80069a0:	08006a5d 	.word	0x08006a5d
 80069a4:	08006a5d 	.word	0x08006a5d
 80069a8:	08006a5d 	.word	0x08006a5d
 80069ac:	08006a5d 	.word	0x08006a5d
 80069b0:	08006a5d 	.word	0x08006a5d
 80069b4:	08006a5d 	.word	0x08006a5d
 80069b8:	08006a5d 	.word	0x08006a5d
 80069bc:	08006a5d 	.word	0x08006a5d
 80069c0:	08006a5d 	.word	0x08006a5d
 80069c4:	08006a5d 	.word	0x08006a5d
 80069c8:	08006a5d 	.word	0x08006a5d
 80069cc:	08006a5d 	.word	0x08006a5d
 80069d0:	08006a5d 	.word	0x08006a5d
 80069d4:	08006a5d 	.word	0x08006a5d
 80069d8:	08006a5d 	.word	0x08006a5d
 80069dc:	08006a4f 	.word	0x08006a4f
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	d037      	beq.n	8006a54 <UART_SetConfig+0xc44>
 80069e4:	e03a      	b.n	8006a5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fc fcc7 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80069ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069ec:	e03c      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ee:	f7fc fcd9 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 80069f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069f4:	e038      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fd febc 	bl	8004778 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a04:	e030      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a06:	f107 0318 	add.w	r3, r7, #24
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe f808 	bl	8004a20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a14:	e028      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a16:	4b09      	ldr	r3, [pc, #36]	@ (8006a3c <UART_SetConfig+0xc2c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d012      	beq.n	8006a48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a22:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <UART_SetConfig+0xc2c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	08db      	lsrs	r3, r3, #3
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	4a04      	ldr	r2, [pc, #16]	@ (8006a40 <UART_SetConfig+0xc30>)
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a34:	e018      	b.n	8006a68 <UART_SetConfig+0xc58>
 8006a36:	bf00      	nop
 8006a38:	08007260 	.word	0x08007260
 8006a3c:	58024400 	.word	0x58024400
 8006a40:	03d09000 	.word	0x03d09000
 8006a44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006a48:	4b24      	ldr	r3, [pc, #144]	@ (8006adc <UART_SetConfig+0xccc>)
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e00c      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ae0 <UART_SetConfig+0xcd0>)
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a52:	e009      	b.n	8006a68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5a:	e005      	b.n	8006a68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a66:	bf00      	nop
    }

    if (pclk != 0U)
 8006a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <UART_SetConfig+0xcd4>)
 8006a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	085b      	lsrs	r3, r3, #1
 8006a86:	441a      	add	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	2b0f      	cmp	r3, #15
 8006a96:	d909      	bls.n	8006aac <UART_SetConfig+0xc9c>
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a9e:	d205      	bcs.n	8006aac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60da      	str	r2, [r3, #12]
 8006aaa:	e002      	b.n	8006ab2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2200      	movs	r2, #0
 8006acc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ace:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3748      	adds	r7, #72	@ 0x48
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006adc:	03d09000 	.word	0x03d09000
 8006ae0:	003d0900 	.word	0x003d0900
 8006ae4:	08007260 	.word	0x08007260

08006ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be6:	d10a      	bne.n	8006bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b098      	sub	sp, #96	@ 0x60
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3c:	f7fa fa74 	bl	8001128 <HAL_GetTick>
 8006c40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d12f      	bne.n	8006cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f88e 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d022      	beq.n	8006cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e063      	b.n	8006d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d149      	bne.n	8006d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f857 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03c      	beq.n	8006d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	617b      	str	r3, [r7, #20]
   return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e012      	b.n	8006d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3758      	adds	r7, #88	@ 0x58
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d90:	e049      	b.n	8006e26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d98:	d045      	beq.n	8006e26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9a:	f7fa f9c5 	bl	8001128 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d302      	bcc.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e048      	b.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d031      	beq.n	8006e26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d110      	bne.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f839 	bl	8006e50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2208      	movs	r2, #8
 8006de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e029      	b.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e00:	d111      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f81f 	bl	8006e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e00f      	b.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	bf0c      	ite	eq
 8006e36:	2301      	moveq	r3, #1
 8006e38:	2300      	movne	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d0a6      	beq.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b095      	sub	sp, #84	@ 0x54
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e6      	bne.n	8006e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <UART_EndRxTransfer+0xc8>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d118      	bne.n	8006ef8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6979      	ldr	r1, [r7, #20]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f0c:	bf00      	nop
 8006f0e:	3754      	adds	r7, #84	@ 0x54
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	effffffe 	.word	0xeffffffe

08006f1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7fe ff52 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fe ff1d 	bl	8005dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f96:	bf00      	nop
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e027      	b.n	8007040 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	@ 0x24
 8006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0201 	bic.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800701e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007060:	2302      	movs	r3, #2
 8007062:	e02d      	b.n	80070c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	@ 0x24
 8007070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f84f 	bl	8007144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070dc:	2302      	movs	r3, #2
 80070de:	e02d      	b.n	800713c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	@ 0x24
 80070ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0201 	bic.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f811 	bl	8007144 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007164:	e031      	b.n	80071ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007166:	2310      	movs	r3, #16
 8007168:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800716a:	2310      	movs	r3, #16
 800716c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	0e5b      	lsrs	r3, r3, #25
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	0f5b      	lsrs	r3, r3, #29
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	7b3a      	ldrb	r2, [r7, #12]
 8007192:	4911      	ldr	r1, [pc, #68]	@ (80071d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007194:	5c8a      	ldrb	r2, [r1, r2]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800719a:	7b3a      	ldrb	r2, [r7, #12]
 800719c:	490f      	ldr	r1, [pc, #60]	@ (80071dc <UARTEx_SetNbDataToProcess+0x98>)
 800719e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	7b7a      	ldrb	r2, [r7, #13]
 80071b0:	4909      	ldr	r1, [pc, #36]	@ (80071d8 <UARTEx_SetNbDataToProcess+0x94>)
 80071b2:	5c8a      	ldrb	r2, [r1, r2]
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071b8:	7b7a      	ldrb	r2, [r7, #13]
 80071ba:	4908      	ldr	r1, [pc, #32]	@ (80071dc <UARTEx_SetNbDataToProcess+0x98>)
 80071bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071be:	fb93 f3f2 	sdiv	r3, r3, r2
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	08007278 	.word	0x08007278
 80071dc:	08007280 	.word	0x08007280

080071e0 <memset>:
 80071e0:	4402      	add	r2, r0
 80071e2:	4603      	mov	r3, r0
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d100      	bne.n	80071ea <memset+0xa>
 80071e8:	4770      	bx	lr
 80071ea:	f803 1b01 	strb.w	r1, [r3], #1
 80071ee:	e7f9      	b.n	80071e4 <memset+0x4>

080071f0 <__libc_init_array>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007228 <__libc_init_array+0x38>)
 80071f4:	4c0d      	ldr	r4, [pc, #52]	@ (800722c <__libc_init_array+0x3c>)
 80071f6:	1b64      	subs	r4, r4, r5
 80071f8:	10a4      	asrs	r4, r4, #2
 80071fa:	2600      	movs	r6, #0
 80071fc:	42a6      	cmp	r6, r4
 80071fe:	d109      	bne.n	8007214 <__libc_init_array+0x24>
 8007200:	4d0b      	ldr	r5, [pc, #44]	@ (8007230 <__libc_init_array+0x40>)
 8007202:	4c0c      	ldr	r4, [pc, #48]	@ (8007234 <__libc_init_array+0x44>)
 8007204:	f000 f818 	bl	8007238 <_init>
 8007208:	1b64      	subs	r4, r4, r5
 800720a:	10a4      	asrs	r4, r4, #2
 800720c:	2600      	movs	r6, #0
 800720e:	42a6      	cmp	r6, r4
 8007210:	d105      	bne.n	800721e <__libc_init_array+0x2e>
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	f855 3b04 	ldr.w	r3, [r5], #4
 8007218:	4798      	blx	r3
 800721a:	3601      	adds	r6, #1
 800721c:	e7ee      	b.n	80071fc <__libc_init_array+0xc>
 800721e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007222:	4798      	blx	r3
 8007224:	3601      	adds	r6, #1
 8007226:	e7f2      	b.n	800720e <__libc_init_array+0x1e>
 8007228:	08007290 	.word	0x08007290
 800722c:	08007290 	.word	0x08007290
 8007230:	08007290 	.word	0x08007290
 8007234:	08007294 	.word	0x08007294

08007238 <_init>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr

08007244 <_fini>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr
