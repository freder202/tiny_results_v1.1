/**
This file was generated by
   _   _      _      _       _____
  | | | |    / \    | |     | ____|
  | |_| |   / _ \   | |     |  _|
  |  _  |  / ___ \  | |___  | |___
  |_| |_| /_/   \_\ |_____| |_____|
version: 1.0.8
Model: pretrainedResnet_quant.tflite
Target: CortexM33DSP
Timestamp: 2023_05_15_11.26.00
Copyright Â© 2023 Robert Bosch GmbH
**/
#ifndef IN_OUT_H
#define IN_OUT_H

#include <stdint.h>
#include <math.h>

#define BUFFER_SIZE 57856

// Input sizes
#define PRETRAINEDRESNET_QUANT_INPUT_1_INT8_SIZE 3072

// Output sizes
#define PRETRAINEDRESNET_QUANT_IDENTITY_INT8_SIZE 10

// Type definitions
typedef int8_t pretrainedResnet_quant_input_1_int8_type[1][32][32][3];
typedef int8_t pretrainedResnet_quant_Identity_int8_type[1][10];

typedef struct {
	int8_t* input_1_int8;
	int8_t* Identity_int8;
} pretrainedResnet_quantInOut;

/// Get the input and expected output for the neural network
///
/// This sets the pointers in the struct defined above to the correct places in the buffer
/// \param buffer Buffer that contains the memory the neural network operates on
/// return Struct containing pointers to the network input and output
pretrainedResnet_quantInOut get_pretrainedResnet_quantInOut_for(char* buffer);

/// Quantizes a single value from input input_1_int8 of network pretrainedResnet_quant
/// /param value Value to quantize
/// return Quantized value
int8_t pretrainedResnet_quant_input_1_int8_quantize_float_to_int8(float value);

/// Dequantizes a single value from output Identity_int8 of network pretrainedResnet_quant
/// /param value Value to dequantize
/// return Dequantized value
float pretrainedResnet_quant_Identity_int8_dequantize_int8_to_float(int8_t value);

#endif // IN_OUT_H
