/**
This file was generated by
   _   _      _      _       _____
  | | | |    / \    | |     | ____|
  | |_| |   / _ \   | |     |  _|
  |  _  |  / ___ \  | |___  | |___
  |_| |_| /_/   \_\ |_____| |_____|
version: 1.0.8
Model: ad01_int8.tflite
Target: CortexM4
Timestamp: 2023_05_16_10.41.18
Copyright Â© 2023 Robert Bosch GmbH
**/
#ifndef IN_OUT_H
#define IN_OUT_H

#include <stdint.h>
#include <math.h>

#define BUFFER_SIZE 768

// Input sizes
#define AD01_INT8_INPUT_1_SIZE 640

// Output sizes
#define AD01_INT8_IDENTITY_SIZE 640

// Type definitions
typedef int8_t ad01_int8_input_1_type[1][1][1][640];
typedef int8_t ad01_int8_Identity_type[1][1][1][640];

typedef struct {
	int8_t* input_1;
	int8_t* Identity;
} ad01_int8InOut;

/// Get the input and expected output for the neural network
///
/// This sets the pointers in the struct defined above to the correct places in the buffer
/// \param buffer Buffer that contains the memory the neural network operates on
/// return Struct containing pointers to the network input and output
ad01_int8InOut get_ad01_int8InOut_for(char* buffer);

/// Quantizes a single value from input input_1 of network ad01_int8
/// /param value Value to quantize
/// return Quantized value
int8_t ad01_int8_input_1_quantize_float_to_int8(float value);

/// Dequantizes a single value from output Identity of network ad01_int8
/// /param value Value to dequantize
/// return Dequantized value
float ad01_int8_Identity_dequantize_int8_to_float(int8_t value);

#endif // IN_OUT_H
